#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
pub mod weights {
    //! Autogenerated weights for pallet_poe
    //!
    //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
    //! DATE: 2021-09-28, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
    //! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128
    #![allow(unused_parens)]
    #![allow(unused_imports)]
    use frame_support::{
        traits::Get,
        weights::{Weight, constants::RocksDbWeight},
    };
    use sp_std::marker::PhantomData;
    use sp_std::vec::Vec;
    /// Weight functions needed for pallet_template.
    pub trait WeightInfo {
        fn create_claim_benchmark(s: Vec<u8>) -> Weight;
    }
    /// Weight functions for pallet_poe.
    pub struct SubstrateWeight<T>(PhantomData<T>);
    impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
        fn create_claim_benchmark(_s: Vec<u8>) -> Weight {
            (54_000_000 as Weight)
                .saturating_add(T::DbWeight::get().reads(1 as Weight))
                .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
    }
    impl WeightInfo for () {
        fn create_claim_benchmark(_s: Vec<u8>) -> Weight {
            (54_000_000 as Weight)
                .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
    }
}
extern crate frame_support;
extern crate frame_system;
/// 一个简单的开始
/// 学习写一个 poe
/// <https://substrate.dev/docs/en/knowledgebase/runtime/frame>
pub use pallet::*;
///
///			The module that hosts all the
///			[FRAME](https://substrate.dev/docs/en/knowledgebase/runtime/frame)
///			types needed to add this pallet to a
///			[runtime](https://substrate.dev/docs/en/knowledgebase/runtime/).
///
pub mod pallet {
    use frame_support::{dispatch::DispatchResultWithPostInfo, pallet_prelude::*};
    use frame_system::pallet_prelude::*;
    pub use crate::weights::WeightInfo;
    use sp_std::vec::Vec;
    use core::convert::TryFrom;
    /// Configure the pallet by specifying the parameters and types on which it depends.
    pub trait Config: frame_system::Config {
        /// Because this pallet emits events, it depends on the runtime's definition of an event.
        type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
        type MaxClaimLength: Get<u32>;
        /// Information on runtime weights.
        type WeightInfo: WeightInfo;
    }
    ///
    ///			The [pallet](https://substrate.dev/docs/en/knowledgebase/runtime/pallets) implementing
    ///			the on-chain logic.
    ///
    pub struct Pallet<T>(frame_support::sp_std::marker::PhantomData<(T)>);
    const _: () = {
        impl<T> core::clone::Clone for Pallet<T> {
            fn clone(&self) -> Self {
                Self(core::clone::Clone::clone(&self.0))
            }
        }
    };
    const _: () = {
        impl<T> core::cmp::Eq for Pallet<T> {}
    };
    const _: () = {
        impl<T> core::cmp::PartialEq for Pallet<T> {
            fn eq(&self, other: &Self) -> bool {
                true && self.0 == other.0
            }
        }
    };
    const _: () = {
        impl<T> core::fmt::Debug for Pallet<T> {
            fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
                fmt.debug_tuple("Pallet").field(&self.0).finish()
            }
        }
    };
    #[allow(type_alias_bounds)]
    pub type Proofs<T: Config> = StorageMap<
        _GeneratedPrefixForStorageProofs<T>,
        Blake2_128Concat,
        BoundedVec<u8, T::MaxClaimLength>,
        (T::AccountId, T::BlockNumber),
    >;
    ///
    ///			The [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted
    ///			by this pallet.
    ///
    pub enum Event<T: Config> {
        ClaimCreated(T::AccountId, Vec<u8>),
        ClaimRevoked(T::AccountId, Vec<u8>),
        ClaimTransfered(T::AccountId, T::AccountId, Vec<u8>),
        #[doc(hidden)]
        #[codec(skip)]
        __Ignore(
            frame_support::sp_std::marker::PhantomData<(T)>,
            frame_support::Never,
        ),
    }
    const _: () = {
        impl<T: Config> core::clone::Clone for Event<T> {
            fn clone(&self) -> Self {
                match self {
                    Self::ClaimCreated(ref _0, ref _1) => Self::ClaimCreated(
                        core::clone::Clone::clone(_0),
                        core::clone::Clone::clone(_1),
                    ),
                    Self::ClaimRevoked(ref _0, ref _1) => Self::ClaimRevoked(
                        core::clone::Clone::clone(_0),
                        core::clone::Clone::clone(_1),
                    ),
                    Self::ClaimTransfered(ref _0, ref _1, ref _2) => Self::ClaimTransfered(
                        core::clone::Clone::clone(_0),
                        core::clone::Clone::clone(_1),
                        core::clone::Clone::clone(_2),
                    ),
                    Self::__Ignore(ref _0, ref _1) => {
                        Self::__Ignore(core::clone::Clone::clone(_0), core::clone::Clone::clone(_1))
                    }
                }
            }
        }
    };
    const _: () = {
        impl<T: Config> core::cmp::Eq for Event<T> {}
    };
    const _: () = {
        impl<T: Config> core::cmp::PartialEq for Event<T> {
            fn eq(&self, other: &Self) -> bool {
                match (self, other) {
                    (Self::ClaimCreated(_0, _1), Self::ClaimCreated(_0_other, _1_other)) => {
                        true && _0 == _0_other && _1 == _1_other
                    }
                    (Self::ClaimRevoked(_0, _1), Self::ClaimRevoked(_0_other, _1_other)) => {
                        true && _0 == _0_other && _1 == _1_other
                    }
                    (
                        Self::ClaimTransfered(_0, _1, _2),
                        Self::ClaimTransfered(_0_other, _1_other, _2_other),
                    ) => true && _0 == _0_other && _1 == _1_other && _2 == _2_other,
                    (Self::__Ignore(_0, _1), Self::__Ignore(_0_other, _1_other)) => {
                        true && _0 == _0_other && _1 == _1_other
                    }
                    (Self::ClaimCreated { .. }, Self::ClaimRevoked { .. }) => false,
                    (Self::ClaimCreated { .. }, Self::ClaimTransfered { .. }) => false,
                    (Self::ClaimCreated { .. }, Self::__Ignore { .. }) => false,
                    (Self::ClaimRevoked { .. }, Self::ClaimCreated { .. }) => false,
                    (Self::ClaimRevoked { .. }, Self::ClaimTransfered { .. }) => false,
                    (Self::ClaimRevoked { .. }, Self::__Ignore { .. }) => false,
                    (Self::ClaimTransfered { .. }, Self::ClaimCreated { .. }) => false,
                    (Self::ClaimTransfered { .. }, Self::ClaimRevoked { .. }) => false,
                    (Self::ClaimTransfered { .. }, Self::__Ignore { .. }) => false,
                    (Self::__Ignore { .. }, Self::ClaimCreated { .. }) => false,
                    (Self::__Ignore { .. }, Self::ClaimRevoked { .. }) => false,
                    (Self::__Ignore { .. }, Self::ClaimTransfered { .. }) => false,
                }
            }
        }
    };
    const _: () = {
        impl<T: Config> core::fmt::Debug for Event<T> {
            fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
                match *self {
                    Self::ClaimCreated(ref _0, ref _1) => fmt
                        .debug_tuple("Event::ClaimCreated")
                        .field(&_0)
                        .field(&_1)
                        .finish(),
                    Self::ClaimRevoked(ref _0, ref _1) => fmt
                        .debug_tuple("Event::ClaimRevoked")
                        .field(&_0)
                        .field(&_1)
                        .finish(),
                    Self::ClaimTransfered(ref _0, ref _1, ref _2) => fmt
                        .debug_tuple("Event::ClaimTransfered")
                        .field(&_0)
                        .field(&_1)
                        .field(&_2)
                        .finish(),
                    Self::__Ignore(ref _0, ref _1) => fmt
                        .debug_tuple("Event::__Ignore")
                        .field(&_0)
                        .field(&_1)
                        .finish(),
                }
            }
        }
    };
    const _: () = {
        impl<T: Config> ::codec::Encode for Event<T>
        where
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
        {
            fn encode_to<__CodecOutputEdqy: ::codec::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    Event::ClaimCreated(ref aa, ref ba) => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                        ::codec::Encode::encode_to(ba, __codec_dest_edqy);
                    }
                    Event::ClaimRevoked(ref aa, ref ba) => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                        ::codec::Encode::encode_to(ba, __codec_dest_edqy);
                    }
                    Event::ClaimTransfered(ref aa, ref ba, ref ca) => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                        ::codec::Encode::encode_to(ba, __codec_dest_edqy);
                        ::codec::Encode::encode_to(ca, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        impl<T: Config> ::codec::EncodeLike for Event<T>
        where
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
            T::AccountId: ::codec::Encode,
        {
        }
    };
    const _: () = {
        impl<T: Config> ::codec::Decode for Event<T>
        where
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
            T::AccountId: ::codec::Decode,
        {
            fn decode<__CodecInputEdqy: ::codec::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| e.chain("Could not decode `Event`, failed to read variant byte"))?
                {
                    __codec_x_edqy if __codec_x_edqy == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Event::<T>::ClaimCreated(
                            {
                                let __codec_res_edqy =
                                    <T::AccountId as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimCreated.0`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                            {
                                let __codec_res_edqy =
                                    <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimCreated.1`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                        ))
                    }
                    __codec_x_edqy if __codec_x_edqy == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Event::<T>::ClaimRevoked(
                            {
                                let __codec_res_edqy =
                                    <T::AccountId as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimRevoked.0`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                            {
                                let __codec_res_edqy =
                                    <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimRevoked.1`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                        ))
                    }
                    __codec_x_edqy if __codec_x_edqy == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Event::<T>::ClaimTransfered(
                            {
                                let __codec_res_edqy =
                                    <T::AccountId as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimTransfered.0`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                            {
                                let __codec_res_edqy =
                                    <T::AccountId as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimTransfered.1`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                            {
                                let __codec_res_edqy =
                                    <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Event::ClaimTransfered.2`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                        ))
                    }
                    _ => ::core::result::Result::Err(<_ as ::core::convert::Into<_>>::into(
                        "Could not decode `Event`, variant doesn't exist",
                    )),
                }
            }
        }
    };
    ///
    ///			Custom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)
    ///			of this pallet.
    ///
    pub enum Error<T> {
        #[doc(hidden)]
        __Ignore(
            frame_support::sp_std::marker::PhantomData<(T)>,
            frame_support::Never,
        ),
        ///存证已经存在
        ProofAlreadyExist,
        ///存证不存在
        ProofNotExist,
        ///不是存证的拥有者
        NotClaimOwner,
        ///存证太长
        ClaimTooLarge,
    }
    impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {}
    impl<T: Config> Pallet<T> {
        pub fn create_claim(origin: OriginFor<T>, claim: Vec<u8>) -> DispatchResultWithPostInfo {
            let sender = ensure_signed(origin)?;
            let bounded_vec = BoundedVec::<u8, T::MaxClaimLength>::try_from(claim.clone())
                .map_err(|_| Error::<T>::ClaimTooLarge)?;
            {
                if !!Proofs::<T>::contains_key(&bounded_vec) {
                    {
                        return Err(Error::<T>::ProofAlreadyExist.into());
                    };
                }
            };
            Proofs::<T>::insert(
                &bounded_vec,
                (sender.clone(), frame_system::Pallet::<T>::block_number()),
            );
            Self::deposit_event(Event::ClaimCreated(sender, claim));
            Ok(().into())
        }
        pub fn revoke_claim(origin: OriginFor<T>, claim: Vec<u8>) -> DispatchResultWithPostInfo {
            let sender = ensure_signed(origin)?;
            let bounded_vec = BoundedVec::<u8, T::MaxClaimLength>::try_from(claim.clone())
                .map_err(|_| Error::<T>::ClaimTooLarge)?;
            let (owner, _) = Proofs::<T>::get(&bounded_vec).ok_or(Error::<T>::ProofNotExist)?;
            {
                if !(owner == sender) {
                    {
                        return Err(Error::<T>::NotClaimOwner.into());
                    };
                }
            };
            Proofs::<T>::remove(&bounded_vec);
            Self::deposit_event(Event::ClaimRevoked(sender, claim));
            Ok(().into())
        }
        pub fn transfer_claim(
            origin: OriginFor<T>,
            target: T::AccountId,
            claim: Vec<u8>,
        ) -> DispatchResultWithPostInfo {
            let sender = ensure_signed(origin)?;
            let bounded_vec = BoundedVec::<u8, T::MaxClaimLength>::try_from(claim.clone())
                .map_err(|_| Error::<T>::ClaimTooLarge)?;
            let (owner, _) = Proofs::<T>::get(&bounded_vec).ok_or(Error::<T>::ProofNotExist)?;
            {
                if !(owner == sender) {
                    {
                        return Err(Error::<T>::NotClaimOwner.into());
                    };
                }
            };
            Proofs::<T>::remove(&bounded_vec);
            Proofs::<T>::insert(
                &bounded_vec,
                (target.clone(), frame_system::Pallet::<T>::block_number()),
            );
            Proofs::<T>::mutate(&bounded_vec, |value| {
                let mut v = value.as_mut().unwrap();
                v.0 = target.clone();
                v.1 = frame_system::Pallet::<T>::block_number();
            });
            Self::deposit_event(Event::ClaimTransfered(sender, target, claim));
            Ok(().into())
        }
    }
    impl<T: Config> Pallet<T> {
        #[doc(hidden)]
        pub fn module_constants_metadata(
        ) -> &'static [frame_support::dispatch::ModuleConstantMetadata] {
            &[{
                #[allow(non_upper_case_types)]
                #[allow(non_camel_case_types)]
                struct MaxClaimLengthDefaultByteGetter<T>(
                    frame_support::sp_std::marker::PhantomData<(T)>,
                );
                impl<T: Config> frame_support::dispatch::DefaultByte for MaxClaimLengthDefaultByteGetter<T> {
                    fn default_byte(&self) -> frame_support::sp_std::vec::Vec<u8> {
                        let value = <T::MaxClaimLength as frame_support::traits::Get<u32>>::get();
                        frame_support::codec::Encode::encode(&value)
                    }
                }
                unsafe impl<T: Config> Send for MaxClaimLengthDefaultByteGetter<T> {}
                unsafe impl<T: Config> Sync for MaxClaimLengthDefaultByteGetter<T> {}
                frame_support::dispatch::ModuleConstantMetadata {
                    name: frame_support::dispatch::DecodeDifferent::Encode("MaxClaimLength"),
                    ty: frame_support::dispatch::DecodeDifferent::Encode("u32"),
                    value: frame_support::dispatch::DecodeDifferent::Encode(
                        frame_support::dispatch::DefaultByteGetter(
                            &MaxClaimLengthDefaultByteGetter::<T>(
                                frame_support::sp_std::marker::PhantomData,
                            ),
                        ),
                    ),
                    documentation: frame_support::dispatch::DecodeDifferent::Encode(&[]),
                }
            }]
        }
    }
    impl<T: Config> frame_support::error::ModuleErrorMetadata for Pallet<T> {
        fn metadata() -> &'static [frame_support::error::ErrorMetadata] {
            <Error<T> as frame_support::error::ModuleErrorMetadata>::metadata()
        }
    }
    /// Type alias to `Pallet`, to be used by `construct_runtime`.
    ///
    /// Generated by `pallet` attribute macro.
    #[deprecated(note = "use `Pallet` instead")]
    #[allow(dead_code)]
    pub type Module<T> = Pallet<T>;
    impl<T: Config> frame_support::traits::GetStorageVersion for Pallet<T> {
        fn current_storage_version() -> frame_support::traits::StorageVersion {
            frame_support::traits::StorageVersion::default()
        }
        fn on_chain_storage_version() -> frame_support::traits::StorageVersion {
            frame_support::traits::StorageVersion::get::<Self>()
        }
    }
    impl<T: Config> frame_support::traits::OnGenesis for Pallet<T> {
        fn on_genesis() {
            let storage_version = frame_support::traits::StorageVersion::default();
            storage_version.put::<Self>();
        }
    }
    impl<T: Config> frame_support::traits::PalletInfoAccess for Pallet<T> {
        fn index() -> usize {
            <<T as frame_system::Config>::PalletInfo as frame_support::traits::PalletInfo>::index::<
                Self,
            >()
            .expect(
                "Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime",
            )
        }
        fn name() -> &'static str {
            <<T as frame_system::Config>::PalletInfo as frame_support::traits::PalletInfo>::name::<
                Self,
            >()
            .expect(
                "Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime",
            )
        }
    }
    impl<T: Config> frame_support::traits::StorageInfoTrait for Pallet<T> {
        fn storage_info() -> frame_support::sp_std::vec::Vec<frame_support::traits::StorageInfo> {
            #[allow(unused_mut)]
            let mut res = ::alloc::vec::Vec::new();
            {
                let mut storage_info = < Proofs < T > as frame_support :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
                res.append(&mut storage_info);
            }
            res
        }
    }
    #[doc(hidden)]
    pub mod __substrate_call_check {
        #[doc(hidden)]
        pub use __is_call_part_defined_0 as is_call_part_defined;
    }
    ///Contains one variant per dispatchable that can be called by an extrinsic.
    #[codec(encode_bound())]
    #[codec(decode_bound())]
    #[allow(non_camel_case_types)]
    pub enum Call<T: Config> {
        #[doc(hidden)]
        #[codec(skip)]
        __Ignore(
            frame_support::sp_std::marker::PhantomData<(T,)>,
            frame_support::Never,
        ),
        create_claim(Vec<u8>),
        revoke_claim(Vec<u8>),
        transfer_claim(T::AccountId, Vec<u8>),
    }
    const _: () = {
        impl<T: Config> core::fmt::Debug for Call<T> {
            fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
                match *self {
                    Self::__Ignore(ref _0, ref _1) => fmt
                        .debug_tuple("Call::__Ignore")
                        .field(&_0)
                        .field(&_1)
                        .finish(),
                    Self::create_claim(ref _0) => {
                        fmt.debug_tuple("Call::create_claim").field(&_0).finish()
                    }
                    Self::revoke_claim(ref _0) => {
                        fmt.debug_tuple("Call::revoke_claim").field(&_0).finish()
                    }
                    Self::transfer_claim(ref _0, ref _1) => fmt
                        .debug_tuple("Call::transfer_claim")
                        .field(&_0)
                        .field(&_1)
                        .finish(),
                }
            }
        }
    };
    const _: () = {
        impl<T: Config> core::clone::Clone for Call<T> {
            fn clone(&self) -> Self {
                match self {
                    Self::__Ignore(ref _0, ref _1) => {
                        Self::__Ignore(core::clone::Clone::clone(_0), core::clone::Clone::clone(_1))
                    }
                    Self::create_claim(ref _0) => Self::create_claim(core::clone::Clone::clone(_0)),
                    Self::revoke_claim(ref _0) => Self::revoke_claim(core::clone::Clone::clone(_0)),
                    Self::transfer_claim(ref _0, ref _1) => Self::transfer_claim(
                        core::clone::Clone::clone(_0),
                        core::clone::Clone::clone(_1),
                    ),
                }
            }
        }
    };
    const _: () = {
        impl<T: Config> core::cmp::Eq for Call<T> {}
    };
    const _: () = {
        impl<T: Config> core::cmp::PartialEq for Call<T> {
            fn eq(&self, other: &Self) -> bool {
                match (self, other) {
                    (Self::__Ignore(_0, _1), Self::__Ignore(_0_other, _1_other)) => {
                        true && _0 == _0_other && _1 == _1_other
                    }
                    (Self::create_claim(_0), Self::create_claim(_0_other)) => {
                        true && _0 == _0_other
                    }
                    (Self::revoke_claim(_0), Self::revoke_claim(_0_other)) => {
                        true && _0 == _0_other
                    }
                    (Self::transfer_claim(_0, _1), Self::transfer_claim(_0_other, _1_other)) => {
                        true && _0 == _0_other && _1 == _1_other
                    }
                    (Self::__Ignore { .. }, Self::create_claim { .. }) => false,
                    (Self::__Ignore { .. }, Self::revoke_claim { .. }) => false,
                    (Self::__Ignore { .. }, Self::transfer_claim { .. }) => false,
                    (Self::create_claim { .. }, Self::__Ignore { .. }) => false,
                    (Self::create_claim { .. }, Self::revoke_claim { .. }) => false,
                    (Self::create_claim { .. }, Self::transfer_claim { .. }) => false,
                    (Self::revoke_claim { .. }, Self::__Ignore { .. }) => false,
                    (Self::revoke_claim { .. }, Self::create_claim { .. }) => false,
                    (Self::revoke_claim { .. }, Self::transfer_claim { .. }) => false,
                    (Self::transfer_claim { .. }, Self::__Ignore { .. }) => false,
                    (Self::transfer_claim { .. }, Self::create_claim { .. }) => false,
                    (Self::transfer_claim { .. }, Self::revoke_claim { .. }) => false,
                }
            }
        }
    };
    const _: () = {
        #[allow(non_camel_case_types)]
        impl<T: Config> ::codec::Encode for Call<T> {
            fn encode_to<__CodecOutputEdqy: ::codec::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    Call::create_claim(ref aa) => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    Call::revoke_claim(ref aa) => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    Call::transfer_claim(ref aa, ref ba) => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                        ::codec::Encode::encode_to(aa, __codec_dest_edqy);
                        ::codec::Encode::encode_to(ba, __codec_dest_edqy);
                    }
                    _ => (),
                }
            }
        }
        impl<T: Config> ::codec::EncodeLike for Call<T> {}
    };
    const _: () = {
        #[allow(non_camel_case_types)]
        impl<T: Config> ::codec::Decode for Call<T> {
            fn decode<__CodecInputEdqy: ::codec::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::codec::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| e.chain("Could not decode `Call`, failed to read variant byte"))?
                {
                    __codec_x_edqy if __codec_x_edqy == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Call::<T>::create_claim({
                            let __codec_res_edqy =
                                <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) => {
                                    return ::core::result::Result::Err(
                                        e.chain("Could not decode `Call::create_claim.0`"),
                                    )
                                }
                                ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                            }
                        }))
                    }
                    __codec_x_edqy if __codec_x_edqy == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Call::<T>::revoke_claim({
                            let __codec_res_edqy =
                                <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) => {
                                    return ::core::result::Result::Err(
                                        e.chain("Could not decode `Call::revoke_claim.0`"),
                                    )
                                }
                                ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                            }
                        }))
                    }
                    __codec_x_edqy if __codec_x_edqy == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Call::<T>::transfer_claim(
                            {
                                let __codec_res_edqy =
                                    <T::AccountId as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Call::transfer_claim.0`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                            {
                                let __codec_res_edqy =
                                    <Vec<u8> as ::codec::Decode>::decode(__codec_input_edqy);
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `Call::transfer_claim.1`"),
                                        )
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            },
                        ))
                    }
                    _ => ::core::result::Result::Err(<_ as ::core::convert::Into<_>>::into(
                        "Could not decode `Call`, variant doesn't exist",
                    )),
                }
            }
        }
    };
    impl<T: Config> frame_support::dispatch::GetDispatchInfo for Call<T> {
        fn get_dispatch_info(&self) -> frame_support::dispatch::DispatchInfo {
            match *self {
                Self::create_claim(ref claim) => {
                    let __pallet_base_weight =
                        T::WeightInfo::create_claim_benchmark(claim.to_vec());
                    let __pallet_weight =
                        <dyn frame_support::dispatch::WeighData<(&Vec<u8>,)>>::weigh_data(
                            &__pallet_base_weight,
                            (claim,),
                        );
                    let __pallet_class = < dyn frame_support :: dispatch :: ClassifyDispatch < (& Vec < u8 > ,) > > :: classify_dispatch (& __pallet_base_weight , (claim ,)) ;
                    let __pallet_pays_fee =
                        <dyn frame_support::dispatch::PaysFee<(&Vec<u8>,)>>::pays_fee(
                            &__pallet_base_weight,
                            (claim,),
                        );
                    frame_support::dispatch::DispatchInfo {
                        weight: __pallet_weight,
                        class: __pallet_class,
                        pays_fee: __pallet_pays_fee,
                    }
                }
                Self::revoke_claim(ref claim) => {
                    let __pallet_base_weight = 0;
                    let __pallet_weight =
                        <dyn frame_support::dispatch::WeighData<(&Vec<u8>,)>>::weigh_data(
                            &__pallet_base_weight,
                            (claim,),
                        );
                    let __pallet_class = < dyn frame_support :: dispatch :: ClassifyDispatch < (& Vec < u8 > ,) > > :: classify_dispatch (& __pallet_base_weight , (claim ,)) ;
                    let __pallet_pays_fee =
                        <dyn frame_support::dispatch::PaysFee<(&Vec<u8>,)>>::pays_fee(
                            &__pallet_base_weight,
                            (claim,),
                        );
                    frame_support::dispatch::DispatchInfo {
                        weight: __pallet_weight,
                        class: __pallet_class,
                        pays_fee: __pallet_pays_fee,
                    }
                }
                Self::transfer_claim(ref target, ref claim) => {
                    let __pallet_base_weight = 0;
                    let __pallet_weight = <dyn frame_support::dispatch::WeighData<(
                        &T::AccountId,
                        &Vec<u8>,
                    )>>::weigh_data(
                        &__pallet_base_weight, (target, claim)
                    );
                    let __pallet_class = <dyn frame_support::dispatch::ClassifyDispatch<(
                        &T::AccountId,
                        &Vec<u8>,
                    )>>::classify_dispatch(
                        &__pallet_base_weight, (target, claim)
                    );
                    let __pallet_pays_fee = <dyn frame_support::dispatch::PaysFee<(
                        &T::AccountId,
                        &Vec<u8>,
                    )>>::pays_fee(
                        &__pallet_base_weight, (target, claim)
                    );
                    frame_support::dispatch::DispatchInfo {
                        weight: __pallet_weight,
                        class: __pallet_class,
                        pays_fee: __pallet_pays_fee,
                    }
                }
                Self::__Ignore(_, _) => {
                    ::core::panicking::unreachable_display(&"__Ignore cannot be used")
                }
            }
        }
    }
    impl<T: Config> frame_support::dispatch::GetCallName for Call<T> {
        fn get_call_name(&self) -> &'static str {
            match *self {
                Self::create_claim(..) => "create_claim",
                Self::revoke_claim(..) => "revoke_claim",
                Self::transfer_claim(..) => "transfer_claim",
                Self::__Ignore(_, _) => {
                    ::core::panicking::unreachable_display(&"__PhantomItem cannot be used.")
                }
            }
        }
        fn get_call_names() -> &'static [&'static str] {
            &["create_claim", "revoke_claim", "transfer_claim"]
        }
    }
    impl<T: Config> frame_support::traits::UnfilteredDispatchable for Call<T> {
        type Origin = frame_system::pallet_prelude::OriginFor<T>;
        fn dispatch_bypass_filter(
            self,
            origin: Self::Origin,
        ) -> frame_support::dispatch::DispatchResultWithPostInfo {
            match self {
                Self::create_claim(claim) => {
                    let __within_span__ = {
                        use ::tracing::__macro_support::Callsite as _;
                        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                            use ::tracing::__macro_support::MacroCallsite;
                            static META: ::tracing::Metadata<'static> = {
                                ::tracing_core::metadata::Metadata::new(
                                    "create_claim",
                                    "pallet_poe::pallet",
                                    ::tracing::Level::TRACE,
                                    Some("pallets/poe/src/lib.rs"),
                                    Some(25u32),
                                    Some("pallet_poe::pallet"),
                                    ::tracing_core::field::FieldSet::new(
                                        &[],
                                        ::tracing_core::callsite::Identifier(&CALLSITE),
                                    ),
                                    ::tracing::metadata::Kind::SPAN,
                                )
                            };
                            MacroCallsite::new(&META)
                        };
                        let mut interest = ::tracing::subscriber::Interest::never();
                        if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                            && ::tracing::Level::TRACE
                                <= ::tracing::level_filters::LevelFilter::current()
                            && {
                                interest = CALLSITE.interest();
                                !interest.is_never()
                            }
                            && CALLSITE.is_enabled(interest)
                        {
                            let meta = CALLSITE.metadata();
                            ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                        } else {
                            let span = CALLSITE.disabled_span();
                            {};
                            span
                        }
                    };
                    let __tracing_guard__ = __within_span__.enter();
                    <Pallet<T>>::create_claim(origin, claim)
                        .map(Into::into)
                        .map_err(Into::into)
                }
                Self::revoke_claim(claim) => {
                    let __within_span__ = {
                        use ::tracing::__macro_support::Callsite as _;
                        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                            use ::tracing::__macro_support::MacroCallsite;
                            static META: ::tracing::Metadata<'static> = {
                                ::tracing_core::metadata::Metadata::new(
                                    "revoke_claim",
                                    "pallet_poe::pallet",
                                    ::tracing::Level::TRACE,
                                    Some("pallets/poe/src/lib.rs"),
                                    Some(25u32),
                                    Some("pallet_poe::pallet"),
                                    ::tracing_core::field::FieldSet::new(
                                        &[],
                                        ::tracing_core::callsite::Identifier(&CALLSITE),
                                    ),
                                    ::tracing::metadata::Kind::SPAN,
                                )
                            };
                            MacroCallsite::new(&META)
                        };
                        let mut interest = ::tracing::subscriber::Interest::never();
                        if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                            && ::tracing::Level::TRACE
                                <= ::tracing::level_filters::LevelFilter::current()
                            && {
                                interest = CALLSITE.interest();
                                !interest.is_never()
                            }
                            && CALLSITE.is_enabled(interest)
                        {
                            let meta = CALLSITE.metadata();
                            ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                        } else {
                            let span = CALLSITE.disabled_span();
                            {};
                            span
                        }
                    };
                    let __tracing_guard__ = __within_span__.enter();
                    <Pallet<T>>::revoke_claim(origin, claim)
                        .map(Into::into)
                        .map_err(Into::into)
                }
                Self::transfer_claim(target, claim) => {
                    let __within_span__ = {
                        use ::tracing::__macro_support::Callsite as _;
                        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                            use ::tracing::__macro_support::MacroCallsite;
                            static META: ::tracing::Metadata<'static> = {
                                ::tracing_core::metadata::Metadata::new(
                                    "transfer_claim",
                                    "pallet_poe::pallet",
                                    ::tracing::Level::TRACE,
                                    Some("pallets/poe/src/lib.rs"),
                                    Some(25u32),
                                    Some("pallet_poe::pallet"),
                                    ::tracing_core::field::FieldSet::new(
                                        &[],
                                        ::tracing_core::callsite::Identifier(&CALLSITE),
                                    ),
                                    ::tracing::metadata::Kind::SPAN,
                                )
                            };
                            MacroCallsite::new(&META)
                        };
                        let mut interest = ::tracing::subscriber::Interest::never();
                        if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                            && ::tracing::Level::TRACE
                                <= ::tracing::level_filters::LevelFilter::current()
                            && {
                                interest = CALLSITE.interest();
                                !interest.is_never()
                            }
                            && CALLSITE.is_enabled(interest)
                        {
                            let meta = CALLSITE.metadata();
                            ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                        } else {
                            let span = CALLSITE.disabled_span();
                            {};
                            span
                        }
                    };
                    let __tracing_guard__ = __within_span__.enter();
                    <Pallet<T>>::transfer_claim(origin, target, claim)
                        .map(Into::into)
                        .map_err(Into::into)
                }
                Self::__Ignore(_, _) => {
                    let _ = origin;
                    ::core::panicking::unreachable_display(&"__PhantomItem cannot be used.");
                }
            }
        }
    }
    impl<T: Config> frame_support::dispatch::Callable<T> for Pallet<T> {
        type Call = Call<T>;
    }
    impl<T: Config> Pallet<T> {
        #[doc(hidden)]
        #[allow(dead_code)]
        pub fn call_functions() -> &'static [frame_support::dispatch::FunctionMetadata] {
            &[
                frame_support::dispatch::FunctionMetadata {
                    name: frame_support::dispatch::DecodeDifferent::Encode("create_claim"),
                    arguments: frame_support::dispatch::DecodeDifferent::Encode(&[
                        frame_support::dispatch::FunctionArgumentMetadata {
                            name: frame_support::dispatch::DecodeDifferent::Encode("claim"),
                            ty: frame_support::dispatch::DecodeDifferent::Encode("Vec<u8>"),
                        },
                    ]),
                    documentation: frame_support::dispatch::DecodeDifferent::Encode(&[]),
                },
                frame_support::dispatch::FunctionMetadata {
                    name: frame_support::dispatch::DecodeDifferent::Encode("revoke_claim"),
                    arguments: frame_support::dispatch::DecodeDifferent::Encode(&[
                        frame_support::dispatch::FunctionArgumentMetadata {
                            name: frame_support::dispatch::DecodeDifferent::Encode("claim"),
                            ty: frame_support::dispatch::DecodeDifferent::Encode("Vec<u8>"),
                        },
                    ]),
                    documentation: frame_support::dispatch::DecodeDifferent::Encode(&[]),
                },
                frame_support::dispatch::FunctionMetadata {
                    name: frame_support::dispatch::DecodeDifferent::Encode("transfer_claim"),
                    arguments: frame_support::dispatch::DecodeDifferent::Encode(&[
                        frame_support::dispatch::FunctionArgumentMetadata {
                            name: frame_support::dispatch::DecodeDifferent::Encode("target"),
                            ty: frame_support::dispatch::DecodeDifferent::Encode("T::AccountId"),
                        },
                        frame_support::dispatch::FunctionArgumentMetadata {
                            name: frame_support::dispatch::DecodeDifferent::Encode("claim"),
                            ty: frame_support::dispatch::DecodeDifferent::Encode("Vec<u8>"),
                        },
                    ]),
                    documentation: frame_support::dispatch::DecodeDifferent::Encode(&[]),
                },
            ]
        }
    }
    impl<T: Config> frame_support::sp_std::fmt::Debug for Error<T> {
        fn fmt(
            &self,
            f: &mut frame_support::sp_std::fmt::Formatter<'_>,
        ) -> frame_support::sp_std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl<T: Config> Error<T> {
        pub fn as_u8(&self) -> u8 {
            match &self {
                Self::__Ignore(_, _) => {
                    ::core::panicking::unreachable_display(&"`__Ignore` can never be constructed")
                }
                Self::ProofAlreadyExist => 0usize as u8,
                Self::ProofNotExist => 1usize as u8,
                Self::NotClaimOwner => 2usize as u8,
                Self::ClaimTooLarge => 3usize as u8,
            }
        }
        pub fn as_str(&self) -> &'static str {
            match &self {
                Self::__Ignore(_, _) => {
                    ::core::panicking::unreachable_display(&"`__Ignore` can never be constructed")
                }
                Self::ProofAlreadyExist => "ProofAlreadyExist",
                Self::ProofNotExist => "ProofNotExist",
                Self::NotClaimOwner => "NotClaimOwner",
                Self::ClaimTooLarge => "ClaimTooLarge",
            }
        }
    }
    impl<T: Config> From<Error<T>> for &'static str {
        fn from(err: Error<T>) -> &'static str {
            err.as_str()
        }
    }
    impl<T: Config> From<Error<T>> for frame_support::sp_runtime::DispatchError {
        fn from(err: Error<T>) -> Self {
            let index = < < T as frame_system :: Config > :: PalletInfo as frame_support :: traits :: PalletInfo > :: index :: < Pallet < T > > () . expect ("Every active module has an index in the runtime; qed") as u8 ;
            frame_support::sp_runtime::DispatchError::Module {
                index,
                error: err.as_u8(),
                message: Some(err.as_str()),
            }
        }
    }
    impl<T: Config> frame_support::error::ModuleErrorMetadata for Error<T> {
        fn metadata() -> &'static [frame_support::error::ErrorMetadata] {
            &[
                frame_support::error::ErrorMetadata {
                    name: frame_support::error::DecodeDifferent::Encode("ProofAlreadyExist"),
                    documentation: frame_support::error::DecodeDifferent::Encode(&["存证已经存在"]),
                },
                frame_support::error::ErrorMetadata {
                    name: frame_support::error::DecodeDifferent::Encode("ProofNotExist"),
                    documentation: frame_support::error::DecodeDifferent::Encode(&["存证不存在"]),
                },
                frame_support::error::ErrorMetadata {
                    name: frame_support::error::DecodeDifferent::Encode("NotClaimOwner"),
                    documentation: frame_support::error::DecodeDifferent::Encode(&[
                        "不是存证的拥有者",
                    ]),
                },
                frame_support::error::ErrorMetadata {
                    name: frame_support::error::DecodeDifferent::Encode("ClaimTooLarge"),
                    documentation: frame_support::error::DecodeDifferent::Encode(&["存证太长"]),
                },
            ]
        }
    }
    #[doc(hidden)]
    pub mod __substrate_event_check {
        #[doc(hidden)]
        pub use __is_event_part_defined_1 as is_event_part_defined;
    }
    impl<T: Config> Pallet<T> {
        pub(super) fn deposit_event(event: Event<T>) {
            let event = <<T as Config>::Event as From<Event<T>>>::from(event);
            let event =
                <<T as Config>::Event as Into<<T as frame_system::Config>::Event>>::into(event);
            <frame_system::Pallet<T>>::deposit_event(event)
        }
    }
    impl<T: Config> From<Event<T>> for () {
        fn from(_: Event<T>) {}
    }
    impl<T: Config> Event<T> {
        #[allow(dead_code)]
        #[doc(hidden)]
        pub fn metadata() -> &'static [frame_support::event::EventMetadata] {
            &[
                frame_support::event::EventMetadata {
                    name: frame_support::event::DecodeDifferent::Encode("ClaimCreated"),
                    arguments: frame_support::event::DecodeDifferent::Encode(&[
                        "AccountId",
                        "Vec<u8>",
                    ]),
                    documentation: frame_support::event::DecodeDifferent::Encode(&[]),
                },
                frame_support::event::EventMetadata {
                    name: frame_support::event::DecodeDifferent::Encode("ClaimRevoked"),
                    arguments: frame_support::event::DecodeDifferent::Encode(&[
                        "AccountId",
                        "Vec<u8>",
                    ]),
                    documentation: frame_support::event::DecodeDifferent::Encode(&[]),
                },
                frame_support::event::EventMetadata {
                    name: frame_support::event::DecodeDifferent::Encode("ClaimTransfered"),
                    arguments: frame_support::event::DecodeDifferent::Encode(&[
                        "AccountId",
                        "AccountId",
                        "Vec<u8>",
                    ]),
                    documentation: frame_support::event::DecodeDifferent::Encode(&[]),
                },
            ]
        }
    }
    impl<T: Config> Pallet<T> {
        #[doc(hidden)]
        pub fn storage_metadata() -> frame_support::metadata::StorageMetadata {
            frame_support :: metadata :: StorageMetadata { prefix : frame_support :: metadata :: DecodeDifferent :: Encode (< < T as frame_system :: Config > :: PalletInfo as frame_support :: traits :: PalletInfo > :: name :: < Pallet < T > > () . expect ("Every active pallet has a name in the runtime; qed")) , entries : frame_support :: metadata :: DecodeDifferent :: Encode (& [frame_support :: metadata :: StorageEntryMetadata { name : frame_support :: metadata :: DecodeDifferent :: Encode (< Proofs < T > as frame_support :: storage :: types :: StorageMapMetadata > :: NAME) , modifier : < Proofs < T > as frame_support :: storage :: types :: StorageMapMetadata > :: MODIFIER , ty : frame_support :: metadata :: StorageEntryType :: Map { hasher : < Proofs < T > as frame_support :: storage :: types :: StorageMapMetadata > :: HASHER , key : frame_support :: metadata :: DecodeDifferent :: Encode ("BoundedVec<u8, T::MaxClaimLength>") , value : frame_support :: metadata :: DecodeDifferent :: Encode ("(T::AccountId, T::BlockNumber)") , unused : false , } , default : frame_support :: metadata :: DecodeDifferent :: Encode (< Proofs < T > as frame_support :: storage :: types :: StorageMapMetadata > :: DEFAULT) , documentation : frame_support :: metadata :: DecodeDifferent :: Encode (& []) , }]) , }
        }
    }
    impl<T: Config> Pallet<T> {
        pub fn proofs<KArg>(k: KArg) -> Option<(T::AccountId, T::BlockNumber)>
        where
            KArg: frame_support::codec::EncodeLike<BoundedVec<u8, T::MaxClaimLength>>,
        {
            <Proofs<T> as frame_support::storage::StorageMap<
                BoundedVec<u8, T::MaxClaimLength>,
                (T::AccountId, T::BlockNumber),
            >>::get(k)
        }
    }
    pub struct _GeneratedPrefixForStorageProofs<T>(core::marker::PhantomData<(T,)>);
    impl<T: Config> frame_support::traits::StorageInstance for _GeneratedPrefixForStorageProofs<T> {
        fn pallet_prefix() -> &'static str {
            <<T as frame_system::Config>::PalletInfo as frame_support::traits::PalletInfo>::name::<
                Pallet<T>,
            >()
            .expect("Every active pallet has a name in the runtime; qed")
        }
        const STORAGE_PREFIX: &'static str = "Proofs";
    }
    #[doc(hidden)]
    pub mod __substrate_inherent_check {
        #[doc(hidden)]
        pub use __is_inherent_part_defined_2 as is_inherent_part_defined;
    }
    /// Hidden instance generated to be internally used when module is used without
    /// instance.
    #[doc(hidden)]
    pub type __InherentHiddenInstance = ();
    pub(super) trait Store {
        type Proofs;
    }
    impl<T: Config> Store for Pallet<T> {
        type Proofs = Proofs<T>;
    }
    impl<T: Config> frame_support::traits::OnFinalize<<T as frame_system::Config>::BlockNumber>
        for Pallet<T>
    {
        fn on_finalize(n: <T as frame_system::Config>::BlockNumber) {
            let __within_span__ = {
                use ::tracing::__macro_support::Callsite as _;
                static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                    use ::tracing::__macro_support::MacroCallsite;
                    static META: ::tracing::Metadata<'static> = {
                        ::tracing_core::metadata::Metadata::new(
                            "on_finalize",
                            "pallet_poe::pallet",
                            ::tracing::Level::TRACE,
                            Some("pallets/poe/src/lib.rs"),
                            Some(25u32),
                            Some("pallet_poe::pallet"),
                            ::tracing_core::field::FieldSet::new(
                                &[],
                                ::tracing_core::callsite::Identifier(&CALLSITE),
                            ),
                            ::tracing::metadata::Kind::SPAN,
                        )
                    };
                    MacroCallsite::new(&META)
                };
                let mut interest = ::tracing::subscriber::Interest::never();
                if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                    && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                    && {
                        interest = CALLSITE.interest();
                        !interest.is_never()
                    }
                    && CALLSITE.is_enabled(interest)
                {
                    let meta = CALLSITE.metadata();
                    ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                } else {
                    let span = CALLSITE.disabled_span();
                    {};
                    span
                }
            };
            let __tracing_guard__ = __within_span__.enter();
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: on_finalize (n)
        }
    }
    impl<T: Config> frame_support::traits::OnIdle<<T as frame_system::Config>::BlockNumber>
        for Pallet<T>
    {
        fn on_idle(
            n: <T as frame_system::Config>::BlockNumber,
            remaining_weight: frame_support::weights::Weight,
        ) -> frame_support::weights::Weight {
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: on_idle (n , remaining_weight)
        }
    }
    impl<T: Config> frame_support::traits::OnInitialize<<T as frame_system::Config>::BlockNumber>
        for Pallet<T>
    {
        fn on_initialize(
            n: <T as frame_system::Config>::BlockNumber,
        ) -> frame_support::weights::Weight {
            let __within_span__ = {
                use ::tracing::__macro_support::Callsite as _;
                static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                    use ::tracing::__macro_support::MacroCallsite;
                    static META: ::tracing::Metadata<'static> = {
                        ::tracing_core::metadata::Metadata::new(
                            "on_initialize",
                            "pallet_poe::pallet",
                            ::tracing::Level::TRACE,
                            Some("pallets/poe/src/lib.rs"),
                            Some(25u32),
                            Some("pallet_poe::pallet"),
                            ::tracing_core::field::FieldSet::new(
                                &[],
                                ::tracing_core::callsite::Identifier(&CALLSITE),
                            ),
                            ::tracing::metadata::Kind::SPAN,
                        )
                    };
                    MacroCallsite::new(&META)
                };
                let mut interest = ::tracing::subscriber::Interest::never();
                if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                    && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                    && {
                        interest = CALLSITE.interest();
                        !interest.is_never()
                    }
                    && CALLSITE.is_enabled(interest)
                {
                    let meta = CALLSITE.metadata();
                    ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                } else {
                    let span = CALLSITE.disabled_span();
                    {};
                    span
                }
            };
            let __tracing_guard__ = __within_span__.enter();
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: on_initialize (n)
        }
    }
    impl<T: Config> frame_support::traits::OnRuntimeUpgrade for Pallet<T> {
        fn on_runtime_upgrade() -> frame_support::weights::Weight {
            let __within_span__ = {
                use ::tracing::__macro_support::Callsite as _;
                static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                    use ::tracing::__macro_support::MacroCallsite;
                    static META: ::tracing::Metadata<'static> = {
                        ::tracing_core::metadata::Metadata::new(
                            "on_runtime_update",
                            "pallet_poe::pallet",
                            ::tracing::Level::TRACE,
                            Some("pallets/poe/src/lib.rs"),
                            Some(25u32),
                            Some("pallet_poe::pallet"),
                            ::tracing_core::field::FieldSet::new(
                                &[],
                                ::tracing_core::callsite::Identifier(&CALLSITE),
                            ),
                            ::tracing::metadata::Kind::SPAN,
                        )
                    };
                    MacroCallsite::new(&META)
                };
                let mut interest = ::tracing::subscriber::Interest::never();
                if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                    && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                    && {
                        interest = CALLSITE.interest();
                        !interest.is_never()
                    }
                    && CALLSITE.is_enabled(interest)
                {
                    let meta = CALLSITE.metadata();
                    ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
                } else {
                    let span = CALLSITE.disabled_span();
                    {};
                    span
                }
            };
            let __tracing_guard__ = __within_span__.enter();
            let pallet_name = < < T as frame_system :: Config > :: PalletInfo as frame_support :: traits :: PalletInfo > :: name :: < Self > () . unwrap_or ("<unknown pallet name>") ;
            {
                let lvl = ::log::Level::Info;
                if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                    ::log::__private_api_log(
                        ::core::fmt::Arguments::new_v1(
                            &["\u{2705} no migration for "],
                            &[::core::fmt::ArgumentV1::new_display(&pallet_name)],
                        ),
                        lvl,
                        &(
                            frame_support::LOG_TARGET,
                            "pallet_poe::pallet",
                            "pallets/poe/src/lib.rs",
                            25u32,
                        ),
                    );
                }
            };
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: on_runtime_upgrade ()
        }
    }
    impl<T: Config> frame_support::traits::OffchainWorker<<T as frame_system::Config>::BlockNumber>
        for Pallet<T>
    {
        fn offchain_worker(n: <T as frame_system::Config>::BlockNumber) {
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: offchain_worker (n)
        }
    }
    impl<T: Config> frame_support::traits::IntegrityTest for Pallet<T> {
        fn integrity_test() {
            < Self as frame_support :: traits :: Hooks < < T as frame_system :: Config > :: BlockNumber > > :: integrity_test ()
        }
    }
    #[doc(hidden)]
    pub mod __substrate_genesis_config_check {
        #[doc(hidden)]
        pub use __is_genesis_config_defined_3 as is_genesis_config_defined;
        #[doc(hidden)]
        pub use __is_std_enabled_for_genesis_3 as is_std_enabled_for_genesis;
    }
    #[doc(hidden)]
    pub mod __substrate_origin_check {
        #[doc(hidden)]
        pub use __is_origin_part_defined_4 as is_origin_part_defined;
    }
    #[doc(hidden)]
    pub mod __substrate_validate_unsigned_check {
        #[doc(hidden)]
        pub use __is_validate_unsigned_part_defined_5 as is_validate_unsigned_part_defined;
    }
}
