#![feature(prelude_import)]
//! # Session Module
//!
//! The Session module allows validators to manage their session keys, provides a function for
//! changing the session length, and handles session rotation.
//!
//! - [`Config`]
//! - [`Call`]
//! - [`Module`]
//!
//! ## Overview
//!
//! ### Terminology
//! <!-- Original author of paragraph: @gavofyork -->
//!
//! - **Session:** A session is a period of time that has a constant set of validators. Validators
//!   can only join or exit the validator set at a session change. It is measured in block numbers.
//!   The block where a session is ended is determined by the `ShouldEndSession` trait. When the
//!   session is ending, a new validator set can be chosen by `OnSessionEnding` implementations.
//!
//! - **Session key:** A session key is actually several keys kept together that provide the various
//!   signing functions required by network authorities/validators in pursuit of their duties.
//! - **Validator ID:** Every account has an associated validator ID. For some simple staking
//!   systems, this may just be the same as the account ID. For staking systems using a
//!   stash/controller model, the validator ID would be the stash account ID of the controller.
//!
//! - **Session key configuration process:** Session keys are set using `set_keys` for use not in
//!   the next session, but the session after next. They are stored in `NextKeys`, a mapping between
//!   the caller's `ValidatorId` and the session keys provided. `set_keys` allows users to set their
//!   session key prior to being selected as validator. It is a public call since it uses
//!   `ensure_signed`, which checks that the origin is a signed account. As such, the account ID of
//!   the origin stored in `NextKeys` may not necessarily be associated with a block author or a
//!   validator. The session keys of accounts are removed once their account balance is zero.
//!
//! - **Session length:** This pallet does not assume anything about the length of each session.
//!   Rather, it relies on an implementation of `ShouldEndSession` to dictate a new session's start.
//!   This pallet provides the `PeriodicSessions` struct for simple periodic sessions.
//!
//! - **Session rotation configuration:** Configure as either a 'normal' (rewardable session where
//!   rewards are applied) or 'exceptional' (slashable) session rotation.
//!
//! - **Session rotation process:** At the beginning of each block, the `on_initialize` function
//!   queries the provided implementation of `ShouldEndSession`. If the session is to end the newly
//!   activated validator IDs and session keys are taken from storage and passed to the
//!   `SessionHandler`. The validator set supplied by `SessionManager::new_session` and the
//!   corresponding session keys, which may have been registered via `set_keys` during the previous
//!   session, are written to storage where they will wait one session before being passed to the
//!   `SessionHandler` themselves.
//!
//! ### Goals
//!
//! The Session pallet is designed to make the following possible:
//!
//! - Set session keys of the validator set for upcoming sessions.
//! - Control the length of sessions.
//! - Configure and switch between either normal or exceptional session rotations.
//!
//! ## Interface
//!
//! ### Dispatchable Functions
//!
//! - `set_keys` - Set a validator's session keys for upcoming sessions.
//!
//! ### Public Functions
//!
//! - `rotate_session` - Change to the next session. Register the new authority set. Queue changes
//!   for next session rotation.
//! - `disable_index` - Disable a validator by index.
//! - `disable` - Disable a validator by Validator ID
//!
//! ## Usage
//!
//! ### Example from the FRAME
//!
//! The [Staking pallet](../pallet_staking/index.html) uses the Session pallet to get the validator
//! set.
//!
//! ```
//! use pallet_session as session;
//!
//! fn validators<T: pallet_session::Config>() -> Vec<<T as pallet_session::Config>::ValidatorId> {
//! <pallet_session::Module<T>>::validators()
//! }
//! # fn main(){}
//! ```
//!
//! ## Related Modules
//!
//! - [Staking](../pallet_staking/index.html)
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
pub mod weights {
    //! Autogenerated weights for pallet_session
    //!
    //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
    //! DATE: 2021-06-19, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
    //! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128
    #![allow(unused_parens)]
    #![allow(unused_imports)]
    use frame_support::{
        traits::Get,
        weights::{Weight, constants::RocksDbWeight},
    };
    use sp_std::marker::PhantomData;
    /// Weight functions needed for pallet_session.
    pub trait WeightInfo {
        fn set_keys() -> Weight;
        fn purge_keys() -> Weight;
    }
    /// Weights for pallet_session using the Substrate node and recommended hardware.
    pub struct SubstrateWeight<T>(PhantomData<T>);
    impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
        fn set_keys() -> Weight {
            (70_351_000 as Weight)
                .saturating_add(T::DbWeight::get().reads(6 as Weight))
                .saturating_add(T::DbWeight::get().writes(5 as Weight))
        }
        fn purge_keys() -> Weight {
            (45_866_000 as Weight)
                .saturating_add(T::DbWeight::get().reads(2 as Weight))
                .saturating_add(T::DbWeight::get().writes(5 as Weight))
        }
    }
    impl WeightInfo for () {
        fn set_keys() -> Weight {
            (70_351_000 as Weight)
                .saturating_add(RocksDbWeight::get().reads(6 as Weight))
                .saturating_add(RocksDbWeight::get().writes(5 as Weight))
        }
        fn purge_keys() -> Weight {
            (45_866_000 as Weight)
                .saturating_add(RocksDbWeight::get().reads(2 as Weight))
                .saturating_add(RocksDbWeight::get().writes(5 as Weight))
        }
    }
}
use codec::Decode;
use frame_support::{
    decl_error, decl_event, decl_module, decl_storage,
    dispatch::{self, DispatchError, DispatchResult},
    ensure,
    traits::{
        EstimateNextNewSession, EstimateNextSessionRotation, FindAuthor, Get, OneSessionHandler,
        ValidatorRegistration, ValidatorSet,
    },
    weights::Weight,
    ConsensusEngineId, Parameter,
};
use frame_system::ensure_signed;
use sp_runtime::{
    traits::{AtLeast32BitUnsigned, Convert, Member, One, OpaqueKeys, Zero},
    KeyTypeId, Perbill, Permill, RuntimeAppPublic,
};
use sp_staking::SessionIndex;
use sp_std::{
    marker::PhantomData,
    ops::{Rem, Sub},
    prelude::*,
};
pub use weights::WeightInfo;
/// Decides whether the session should be ended.
pub trait ShouldEndSession<BlockNumber> {
    /// Return `true` if the session should be ended.
    fn should_end_session(now: BlockNumber) -> bool;
}
/// Ends the session after a fixed period of blocks.
///
/// The first session will have length of `Offset`, and
/// the following sessions will have length of `Period`.
/// This may prove nonsensical if `Offset` >= `Period`.
pub struct PeriodicSessions<Period, Offset>(PhantomData<(Period, Offset)>);
impl<
        BlockNumber: Rem<Output = BlockNumber> + Sub<Output = BlockNumber> + Zero + PartialOrd,
        Period: Get<BlockNumber>,
        Offset: Get<BlockNumber>,
    > ShouldEndSession<BlockNumber> for PeriodicSessions<Period, Offset>
{
    fn should_end_session(now: BlockNumber) -> bool {
        let offset = Offset::get();
        now >= offset && ((now - offset) % Period::get()).is_zero()
    }
}
impl<
        BlockNumber: AtLeast32BitUnsigned + Clone,
        Period: Get<BlockNumber>,
        Offset: Get<BlockNumber>,
    > EstimateNextSessionRotation<BlockNumber> for PeriodicSessions<Period, Offset>
{
    fn average_session_length() -> BlockNumber {
        Period::get()
    }
    fn estimate_current_session_progress(now: BlockNumber) -> (Option<Permill>, Weight) {
        let offset = Offset::get();
        let period = Period::get();
        let progress = if now >= offset {
            let current = (now - offset) % period.clone() + One::one();
            Some(Permill::from_rational(current.clone(), period.clone()))
        } else {
            Some(Permill::from_rational(now + One::one(), offset))
        };
        (progress, Zero::zero())
    }
    fn estimate_next_session_rotation(now: BlockNumber) -> (Option<BlockNumber>, Weight) {
        let offset = Offset::get();
        let period = Period::get();
        let next_session = if now > offset {
            let block_after_last_session = (now.clone() - offset) % period.clone();
            if block_after_last_session > Zero::zero() {
                now.saturating_add(period.saturating_sub(block_after_last_session))
            } else {
                now + period
            }
        } else {
            offset
        };
        (Some(next_session), Zero::zero())
    }
}
/// A trait for managing creation of new validator set.
pub trait SessionManager<ValidatorId> {
    /// Plan a new session, and optionally provide the new validator set.
    ///
    /// Even if the validator-set is the same as before, if any underlying economic conditions have
    /// changed (i.e. stake-weights), the new validator set must be returned. This is necessary for
    /// consensus engines making use of the session module to issue a validator-set change so
    /// misbehavior can be provably associated with the new economic conditions as opposed to the
    /// old. The returned validator set, if any, will not be applied until `new_index`. `new_index`
    /// is strictly greater than from previous call.
    ///
    /// The first session start at index 0.
    ///
    /// `new_session(session)` is guaranteed to be called before `end_session(session-1)`. In other
    /// words, a new session must always be planned before an ongoing one can be finished.
    fn new_session(new_index: SessionIndex) -> Option<Vec<ValidatorId>>;
    /// Same as `new_session`, but it this should only be called at genesis.
    ///
    /// The session manager might decide to treat this in a different way. Default impl is simply
    /// using [`new_session`](Self::new_session).
    fn new_session_genesis(new_index: SessionIndex) -> Option<Vec<ValidatorId>> {
        Self::new_session(new_index)
    }
    /// End the session.
    ///
    /// Because the session pallet can queue validator set the ending session can be lower than the
    /// last new session index.
    fn end_session(end_index: SessionIndex);
    /// Start an already planned session.
    ///
    /// The session start to be used for validation.
    fn start_session(start_index: SessionIndex);
}
impl<A> SessionManager<A> for () {
    fn new_session(_: SessionIndex) -> Option<Vec<A>> {
        None
    }
    fn start_session(_: SessionIndex) {}
    fn end_session(_: SessionIndex) {}
}
/// Handler for session life cycle events.
pub trait SessionHandler<ValidatorId> {
    /// All the key type ids this session handler can process.
    ///
    /// The order must be the same as it expects them in
    /// [`on_new_session`](Self::on_new_session<Ks>) and [`on_genesis_session`](Self::on_genesis_session<Ks>).
    const KEY_TYPE_IDS: &'static [KeyTypeId];
    /// The given validator set will be used for the genesis session.
    /// It is guaranteed that the given validator set will also be used
    /// for the second session, therefore the first call to `on_new_session`
    /// should provide the same validator set.
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(ValidatorId, Ks)]);
    /// Session set has changed; act appropriately. Note that this can be called
    /// before initialization of your module.
    ///
    /// `changed` is true whenever any of the session keys or underlying economic
    /// identities or weightings behind those keys has changed.
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(ValidatorId, Ks)],
        queued_validators: &[(ValidatorId, Ks)],
    );
    /// A notification for end of the session.
    ///
    /// Note it is triggered before any [`SessionManager::end_session`] handlers,
    /// so we can still affect the validator set.
    fn on_before_session_ending() {}
    /// A validator got disabled. Act accordingly until a new session begins.
    fn on_disabled(validator_index: usize);
}
#[allow(unused)]
impl<AId, TupleElement0: OneSessionHandler<AId>> SessionHandler<AId> for (TupleElement0,) {
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[<TupleElement0::Key as RuntimeAppPublic>::ID];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
    }
}
#[allow(unused)]
impl<AId, TupleElement0: OneSessionHandler<AId>, TupleElement1: OneSessionHandler<AId>>
    SessionHandler<AId> for (TupleElement0, TupleElement1)
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
    > SessionHandler<AId> for (TupleElement0, TupleElement1, TupleElement2)
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
    > SessionHandler<AId> for (TupleElement0, TupleElement1, TupleElement2, TupleElement3)
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
        TupleElement25: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
        TupleElement25,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
        <TupleElement25::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement25::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement25::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
        TupleElement25::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
        TupleElement25::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
        TupleElement25: OneSessionHandler<AId>,
        TupleElement26: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
        TupleElement25,
        TupleElement26,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
        <TupleElement25::Key as RuntimeAppPublic>::ID,
        <TupleElement26::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement25::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement26::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement25::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement26::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
        TupleElement25::on_before_session_ending();
        TupleElement26::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
        TupleElement25::on_disabled(i);
        TupleElement26::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
        TupleElement25: OneSessionHandler<AId>,
        TupleElement26: OneSessionHandler<AId>,
        TupleElement27: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
        TupleElement25,
        TupleElement26,
        TupleElement27,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
        <TupleElement25::Key as RuntimeAppPublic>::ID,
        <TupleElement26::Key as RuntimeAppPublic>::ID,
        <TupleElement27::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement25::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement26::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement27::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement25::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement26::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement27::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
        TupleElement25::on_before_session_ending();
        TupleElement26::on_before_session_ending();
        TupleElement27::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
        TupleElement25::on_disabled(i);
        TupleElement26::on_disabled(i);
        TupleElement27::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
        TupleElement25: OneSessionHandler<AId>,
        TupleElement26: OneSessionHandler<AId>,
        TupleElement27: OneSessionHandler<AId>,
        TupleElement28: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
        TupleElement25,
        TupleElement26,
        TupleElement27,
        TupleElement28,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
        <TupleElement25::Key as RuntimeAppPublic>::ID,
        <TupleElement26::Key as RuntimeAppPublic>::ID,
        <TupleElement27::Key as RuntimeAppPublic>::ID,
        <TupleElement28::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement25::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement26::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement27::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement28::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement25::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement26::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement27::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement28::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
        TupleElement25::on_before_session_ending();
        TupleElement26::on_before_session_ending();
        TupleElement27::on_before_session_ending();
        TupleElement28::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
        TupleElement25::on_disabled(i);
        TupleElement26::on_disabled(i);
        TupleElement27::on_disabled(i);
        TupleElement28::on_disabled(i);
    }
}
#[allow(unused)]
impl<
        AId,
        TupleElement0: OneSessionHandler<AId>,
        TupleElement1: OneSessionHandler<AId>,
        TupleElement2: OneSessionHandler<AId>,
        TupleElement3: OneSessionHandler<AId>,
        TupleElement4: OneSessionHandler<AId>,
        TupleElement5: OneSessionHandler<AId>,
        TupleElement6: OneSessionHandler<AId>,
        TupleElement7: OneSessionHandler<AId>,
        TupleElement8: OneSessionHandler<AId>,
        TupleElement9: OneSessionHandler<AId>,
        TupleElement10: OneSessionHandler<AId>,
        TupleElement11: OneSessionHandler<AId>,
        TupleElement12: OneSessionHandler<AId>,
        TupleElement13: OneSessionHandler<AId>,
        TupleElement14: OneSessionHandler<AId>,
        TupleElement15: OneSessionHandler<AId>,
        TupleElement16: OneSessionHandler<AId>,
        TupleElement17: OneSessionHandler<AId>,
        TupleElement18: OneSessionHandler<AId>,
        TupleElement19: OneSessionHandler<AId>,
        TupleElement20: OneSessionHandler<AId>,
        TupleElement21: OneSessionHandler<AId>,
        TupleElement22: OneSessionHandler<AId>,
        TupleElement23: OneSessionHandler<AId>,
        TupleElement24: OneSessionHandler<AId>,
        TupleElement25: OneSessionHandler<AId>,
        TupleElement26: OneSessionHandler<AId>,
        TupleElement27: OneSessionHandler<AId>,
        TupleElement28: OneSessionHandler<AId>,
        TupleElement29: OneSessionHandler<AId>,
    > SessionHandler<AId>
    for (
        TupleElement0,
        TupleElement1,
        TupleElement2,
        TupleElement3,
        TupleElement4,
        TupleElement5,
        TupleElement6,
        TupleElement7,
        TupleElement8,
        TupleElement9,
        TupleElement10,
        TupleElement11,
        TupleElement12,
        TupleElement13,
        TupleElement14,
        TupleElement15,
        TupleElement16,
        TupleElement17,
        TupleElement18,
        TupleElement19,
        TupleElement20,
        TupleElement21,
        TupleElement22,
        TupleElement23,
        TupleElement24,
        TupleElement25,
        TupleElement26,
        TupleElement27,
        TupleElement28,
        TupleElement29,
    )
{
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[
        <TupleElement0::Key as RuntimeAppPublic>::ID,
        <TupleElement1::Key as RuntimeAppPublic>::ID,
        <TupleElement2::Key as RuntimeAppPublic>::ID,
        <TupleElement3::Key as RuntimeAppPublic>::ID,
        <TupleElement4::Key as RuntimeAppPublic>::ID,
        <TupleElement5::Key as RuntimeAppPublic>::ID,
        <TupleElement6::Key as RuntimeAppPublic>::ID,
        <TupleElement7::Key as RuntimeAppPublic>::ID,
        <TupleElement8::Key as RuntimeAppPublic>::ID,
        <TupleElement9::Key as RuntimeAppPublic>::ID,
        <TupleElement10::Key as RuntimeAppPublic>::ID,
        <TupleElement11::Key as RuntimeAppPublic>::ID,
        <TupleElement12::Key as RuntimeAppPublic>::ID,
        <TupleElement13::Key as RuntimeAppPublic>::ID,
        <TupleElement14::Key as RuntimeAppPublic>::ID,
        <TupleElement15::Key as RuntimeAppPublic>::ID,
        <TupleElement16::Key as RuntimeAppPublic>::ID,
        <TupleElement17::Key as RuntimeAppPublic>::ID,
        <TupleElement18::Key as RuntimeAppPublic>::ID,
        <TupleElement19::Key as RuntimeAppPublic>::ID,
        <TupleElement20::Key as RuntimeAppPublic>::ID,
        <TupleElement21::Key as RuntimeAppPublic>::ID,
        <TupleElement22::Key as RuntimeAppPublic>::ID,
        <TupleElement23::Key as RuntimeAppPublic>::ID,
        <TupleElement24::Key as RuntimeAppPublic>::ID,
        <TupleElement25::Key as RuntimeAppPublic>::ID,
        <TupleElement26::Key as RuntimeAppPublic>::ID,
        <TupleElement27::Key as RuntimeAppPublic>::ID,
        <TupleElement28::Key as RuntimeAppPublic>::ID,
        <TupleElement29::Key as RuntimeAppPublic>::ID,
    ];
    fn on_genesis_session<Ks: OpaqueKeys>(validators: &[(AId, Ks)]) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement0::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement1::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement2::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement3::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement4::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement5::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement6::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement7::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement8::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement9::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement10::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement11::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement12::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement13::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement14::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement15::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement16::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement17::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement18::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement19::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement20::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement21::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement22::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement23::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement24::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement25::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement26::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement27::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement28::on_genesis_session(our_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement29::Key>(<TupleElement29::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        TupleElement29::on_genesis_session(our_keys);
    }
    fn on_new_session<Ks: OpaqueKeys>(
        changed: bool,
        validators: &[(AId, Ks)],
        queued_validators: &[(AId, Ks)],
    ) {
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement0::Key>(<TupleElement0::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement0::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement1::Key>(<TupleElement1::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement1::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement2::Key>(<TupleElement2::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement2::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement3::Key>(<TupleElement3::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement3::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement4::Key>(<TupleElement4::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement4::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement5::Key>(<TupleElement5::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement5::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement6::Key>(<TupleElement6::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement6::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement7::Key>(<TupleElement7::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement7::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement8::Key>(<TupleElement8::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement8::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement9::Key>(<TupleElement9::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement9::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement10::Key>(<TupleElement10::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement10::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement11::Key>(<TupleElement11::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement11::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement12::Key>(<TupleElement12::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement12::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement13::Key>(<TupleElement13::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement13::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement14::Key>(<TupleElement14::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement14::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement15::Key>(<TupleElement15::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement15::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement16::Key>(<TupleElement16::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement16::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement17::Key>(<TupleElement17::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement17::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement18::Key>(<TupleElement18::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement18::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement19::Key>(<TupleElement19::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement19::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement20::Key>(<TupleElement20::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement20::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement21::Key>(<TupleElement21::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement21::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement22::Key>(<TupleElement22::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement22::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement23::Key>(<TupleElement23::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement23::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement24::Key>(<TupleElement24::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement24::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement25::Key>(<TupleElement25::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement25::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement26::Key>(<TupleElement26::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement26::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement27::Key>(<TupleElement27::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement27::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement28::Key>(<TupleElement28::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement28::on_new_session(changed, our_keys, queued_keys);
        let our_keys: Box<dyn Iterator<Item = _>> = Box::new(validators.iter().map(|k| {
            (
                &k.0,
                k.1.get::<TupleElement29::Key>(<TupleElement29::Key as RuntimeAppPublic>::ID)
                    .unwrap_or_default(),
            )
        }));
        let queued_keys: Box<dyn Iterator<Item = _>> =
            Box::new(queued_validators.iter().map(|k| {
                (
                    &k.0,
                    k.1.get::<TupleElement29::Key>(<TupleElement29::Key as RuntimeAppPublic>::ID)
                        .unwrap_or_default(),
                )
            }));
        TupleElement29::on_new_session(changed, our_keys, queued_keys);
    }
    fn on_before_session_ending() {
        TupleElement0::on_before_session_ending();
        TupleElement1::on_before_session_ending();
        TupleElement2::on_before_session_ending();
        TupleElement3::on_before_session_ending();
        TupleElement4::on_before_session_ending();
        TupleElement5::on_before_session_ending();
        TupleElement6::on_before_session_ending();
        TupleElement7::on_before_session_ending();
        TupleElement8::on_before_session_ending();
        TupleElement9::on_before_session_ending();
        TupleElement10::on_before_session_ending();
        TupleElement11::on_before_session_ending();
        TupleElement12::on_before_session_ending();
        TupleElement13::on_before_session_ending();
        TupleElement14::on_before_session_ending();
        TupleElement15::on_before_session_ending();
        TupleElement16::on_before_session_ending();
        TupleElement17::on_before_session_ending();
        TupleElement18::on_before_session_ending();
        TupleElement19::on_before_session_ending();
        TupleElement20::on_before_session_ending();
        TupleElement21::on_before_session_ending();
        TupleElement22::on_before_session_ending();
        TupleElement23::on_before_session_ending();
        TupleElement24::on_before_session_ending();
        TupleElement25::on_before_session_ending();
        TupleElement26::on_before_session_ending();
        TupleElement27::on_before_session_ending();
        TupleElement28::on_before_session_ending();
        TupleElement29::on_before_session_ending();
    }
    fn on_disabled(i: usize) {
        TupleElement0::on_disabled(i);
        TupleElement1::on_disabled(i);
        TupleElement2::on_disabled(i);
        TupleElement3::on_disabled(i);
        TupleElement4::on_disabled(i);
        TupleElement5::on_disabled(i);
        TupleElement6::on_disabled(i);
        TupleElement7::on_disabled(i);
        TupleElement8::on_disabled(i);
        TupleElement9::on_disabled(i);
        TupleElement10::on_disabled(i);
        TupleElement11::on_disabled(i);
        TupleElement12::on_disabled(i);
        TupleElement13::on_disabled(i);
        TupleElement14::on_disabled(i);
        TupleElement15::on_disabled(i);
        TupleElement16::on_disabled(i);
        TupleElement17::on_disabled(i);
        TupleElement18::on_disabled(i);
        TupleElement19::on_disabled(i);
        TupleElement20::on_disabled(i);
        TupleElement21::on_disabled(i);
        TupleElement22::on_disabled(i);
        TupleElement23::on_disabled(i);
        TupleElement24::on_disabled(i);
        TupleElement25::on_disabled(i);
        TupleElement26::on_disabled(i);
        TupleElement27::on_disabled(i);
        TupleElement28::on_disabled(i);
        TupleElement29::on_disabled(i);
    }
}
/// `SessionHandler` for tests that use `UintAuthorityId` as `Keys`.
pub struct TestSessionHandler;
impl<AId> SessionHandler<AId> for TestSessionHandler {
    const KEY_TYPE_IDS: &'static [KeyTypeId] = &[sp_runtime::key_types::DUMMY];
    fn on_genesis_session<Ks: OpaqueKeys>(_: &[(AId, Ks)]) {}
    fn on_new_session<Ks: OpaqueKeys>(_: bool, _: &[(AId, Ks)], _: &[(AId, Ks)]) {}
    fn on_before_session_ending() {}
    fn on_disabled(_: usize) {}
}
impl<T: Config> ValidatorRegistration<T::ValidatorId> for Module<T> {
    fn is_registered(id: &T::ValidatorId) -> bool {
        Self::load_keys(id).is_some()
    }
}
pub trait Config: frame_system::Config {
    /// The overarching event type.
    type Event: From<Event> + Into<<Self as frame_system::Config>::Event>;
    /// A stable ID for a validator.
    type ValidatorId: Member + Parameter;
    /// A conversion from account ID to validator ID.
    ///
    /// Its cost must be at most one storage read.
    type ValidatorIdOf: Convert<Self::AccountId, Option<Self::ValidatorId>>;
    /// Indicator for when to end the session.
    type ShouldEndSession: ShouldEndSession<Self::BlockNumber>;
    /// Something that can predict the next session rotation. This should typically come from the
    /// same logical unit that provides [`ShouldEndSession`], yet, it gives a best effort estimate.
    /// It is helpful to implement [`EstimateNextNewSession`].
    type NextSessionRotation: EstimateNextSessionRotation<Self::BlockNumber>;
    /// Handler for managing new session.
    type SessionManager: SessionManager<Self::ValidatorId>;
    /// Handler when a session has changed.
    type SessionHandler: SessionHandler<Self::ValidatorId>;
    /// The keys.
    type Keys: OpaqueKeys + Member + Parameter + Default;
    /// The fraction of validators set that is safe to be disabled.
    ///
    /// After the threshold is reached `disabled` method starts to return true,
    /// which in combination with `pallet_staking` forces a new era.
    type DisabledValidatorsThreshold: Get<Perbill>;
    /// Weight information for extrinsics in this pallet.
    type WeightInfo: WeightInfo;
}
use self::sp_api_hidden_includes_decl_storage::hidden_include::{
    StorageValue as _, StorageMap as _, StorageDoubleMap as _, StorageNMap as _,
    StoragePrefixedMap as _, IterableStorageMap as _, IterableStorageNMap as _,
    IterableStorageDoubleMap as _,
};
#[doc(hidden)]
mod sp_api_hidden_includes_decl_storage {
    pub extern crate frame_support as hidden_include;
}
trait Store {
    type Validators;
    type CurrentIndex;
    type QueuedChanged;
    type QueuedKeys;
    type DisabledValidators;
    type NextKeys;
    type KeyOwner;
}
impl<T: Config + 'static> Store for Module<T> {
    type Validators = Validators<T>;
    type CurrentIndex = CurrentIndex;
    type QueuedChanged = QueuedChanged;
    type QueuedKeys = QueuedKeys<T>;
    type DisabledValidators = DisabledValidators;
    type NextKeys = NextKeys<T>;
    type KeyOwner = KeyOwner<T>;
}
impl<T: Config + 'static> Module<T> {
    /// The current set of validators.
    pub fn validators() -> Vec<T::ValidatorId> {
        < Validators < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StorageValue < Vec < T :: ValidatorId > > > :: get ()
    }
    /// Current index of the session.
    pub fn current_index() -> SessionIndex {
        < CurrentIndex < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StorageValue < SessionIndex > > :: get ()
    }
    /// The queued keys for the next session. When the next session begins, these keys
    /// will be used to determine the validator's session keys.
    pub fn queued_keys() -> Vec<(T::ValidatorId, T::Keys)> {
        < QueuedKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StorageValue < Vec < (T :: ValidatorId , T :: Keys) > > > :: get ()
    }
    /// Indices of disabled validators.
    ///
    /// The set is cleared when `on_session_ending` returns a new set of identities.
    pub fn disabled_validators() -> Vec<u32> {
        < DisabledValidators < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StorageValue < Vec < u32 > > > :: get ()
    }
}
#[doc(hidden)]
pub struct __GetByteStructValidators<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_Validators:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructValidators<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_Validators
            .get_or_init(|| {
                let def_val: Vec<T::ValidatorId> = Default::default();
                <Vec<T::ValidatorId> as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructValidators<T> {}
unsafe impl<T: Config> Sync for __GetByteStructValidators<T> {}
#[doc(hidden)]
pub struct __GetByteStructCurrentIndex<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_CurrentIndex:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructCurrentIndex<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_CurrentIndex
            .get_or_init(|| {
                let def_val: SessionIndex = Default::default();
                <SessionIndex as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructCurrentIndex<T> {}
unsafe impl<T: Config> Sync for __GetByteStructCurrentIndex<T> {}
#[doc(hidden)]
pub struct __GetByteStructQueuedChanged<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_QueuedChanged:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructQueuedChanged<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_QueuedChanged
            .get_or_init(|| {
                let def_val: bool = Default::default();
                <bool as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructQueuedChanged<T> {}
unsafe impl<T: Config> Sync for __GetByteStructQueuedChanged<T> {}
#[doc(hidden)]
pub struct __GetByteStructQueuedKeys<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_QueuedKeys:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructQueuedKeys<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_QueuedKeys
            .get_or_init(|| {
                let def_val: Vec<(T::ValidatorId, T::Keys)> = Default::default();
                <Vec<(T::ValidatorId, T::Keys)> as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructQueuedKeys<T> {}
unsafe impl<T: Config> Sync for __GetByteStructQueuedKeys<T> {}
#[doc(hidden)]
pub struct __GetByteStructDisabledValidators<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_DisabledValidators:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructDisabledValidators<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_DisabledValidators
            .get_or_init(|| {
                let def_val: Vec<u32> = Default::default();
                <Vec<u32> as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructDisabledValidators<T> {}
unsafe impl<T: Config> Sync for __GetByteStructDisabledValidators<T> {}
#[doc(hidden)]
pub struct __GetByteStructNextKeys<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_NextKeys:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructNextKeys<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_NextKeys
            .get_or_init(|| {
                let def_val: Option<T::Keys> = Default::default();
                <Option<T::Keys> as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructNextKeys<T> {}
unsafe impl<T: Config> Sync for __GetByteStructNextKeys<T> {}
#[doc(hidden)]
pub struct __GetByteStructKeyOwner<T>(
    pub self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T)>,
);
#[cfg(feature = "std")]
#[allow(non_upper_case_globals)]
static __CACHE_GET_BYTE_STRUCT_KeyOwner:
    self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8>,
    > = self::sp_api_hidden_includes_decl_storage::hidden_include::once_cell::sync::OnceCell::new();
#[cfg(feature = "std")]
impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::DefaultByte
    for __GetByteStructKeyOwner<T>
{
    fn default_byte(
        &self,
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<u8> {
        use self::sp_api_hidden_includes_decl_storage::hidden_include::codec::Encode;
        __CACHE_GET_BYTE_STRUCT_KeyOwner
            .get_or_init(|| {
                let def_val: Option<T::ValidatorId> = Default::default();
                <Option<T::ValidatorId> as Encode>::encode(&def_val)
            })
            .clone()
    }
}
unsafe impl<T: Config> Send for __GetByteStructKeyOwner<T> {}
unsafe impl<T: Config> Sync for __GetByteStructKeyOwner<T> {}
impl<T: Config + 'static> Module<T> {
    #[doc(hidden)]
    pub fn storage_metadata(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::metadata::StorageMetadata {
        self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageMetadata { prefix : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("Session") , entries : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("Validators") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Default , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Plain (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("Vec<T::ValidatorId>")) , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructValidators :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" The current set of validators."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("CurrentIndex") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Default , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Plain (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("SessionIndex")) , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructCurrentIndex :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" Current index of the session."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("QueuedChanged") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Default , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Plain (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("bool")) , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructQueuedChanged :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" True if the underlying economic identities or weighting behind the validators" , " has changed in the queued validator set."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("QueuedKeys") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Default , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Plain (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("Vec<(T::ValidatorId, T::Keys)>")) , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructQueuedKeys :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" The queued keys for the next session. When the next session begins, these keys" , " will be used to determine the validator\'s session keys."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("DisabledValidators") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Default , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Plain (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("Vec<u32>")) , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructDisabledValidators :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" Indices of disabled validators." , "" , " The set is cleared when `on_session_ending` returns a new set of identities."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("NextKeys") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Optional , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Map { hasher : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageHasher :: Twox64Concat , key : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("T::ValidatorId") , value : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("T::Keys") , unused : false , } , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructNextKeys :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" The next session keys for a validator."]) , } , self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryMetadata { name : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("KeyOwner") , modifier : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryModifier :: Optional , ty : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageEntryType :: Map { hasher : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: StorageHasher :: Twox64Concat , key : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("(KeyTypeId, Vec<u8>)") , value : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode ("T::ValidatorId") , unused : false , } , default : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DefaultByteGetter (& __GetByteStructKeyOwner :: < T > (self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_std :: marker :: PhantomData))) , documentation : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: metadata :: DecodeDifferent :: Encode (& [" The owner of a key. The key is the `KeyTypeId` + the encoded key."]) , }] [..]) , }
    }
}
/// Hidden instance generated to be internally used when module is used without
/// instance.
#[doc(hidden)]
pub struct __InherentHiddenInstance;
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::clone::Clone for __InherentHiddenInstance {
    #[inline]
    fn clone(&self) -> __InherentHiddenInstance {
        match *self {
            __InherentHiddenInstance => __InherentHiddenInstance,
        }
    }
}
impl ::core::marker::StructuralEq for __InherentHiddenInstance {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::Eq for __InherentHiddenInstance {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        {}
    }
}
impl ::core::marker::StructuralPartialEq for __InherentHiddenInstance {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::PartialEq for __InherentHiddenInstance {
    #[inline]
    fn eq(&self, other: &__InherentHiddenInstance) -> bool {
        match *other {
            __InherentHiddenInstance => match *self {
                __InherentHiddenInstance => true,
            },
        }
    }
}
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl _parity_scale_codec::Encode for __InherentHiddenInstance {
        fn encode_to<__CodecOutputEdqy: _parity_scale_codec::Output + ?Sized>(
            &self,
            __codec_dest_edqy: &mut __CodecOutputEdqy,
        ) {
        }
    }
    impl _parity_scale_codec::EncodeLike for __InherentHiddenInstance {}
};
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl _parity_scale_codec::Decode for __InherentHiddenInstance {
        fn decode<__CodecInputEdqy: _parity_scale_codec::Input>(
            __codec_input_edqy: &mut __CodecInputEdqy,
        ) -> ::core::result::Result<Self, _parity_scale_codec::Error> {
            ::core::result::Result::Ok(__InherentHiddenInstance)
        }
    }
};
impl core::fmt::Debug for __InherentHiddenInstance {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_tuple("__InherentHiddenInstance").finish()
    }
}
impl self::sp_api_hidden_includes_decl_storage::hidden_include::traits::Instance
    for __InherentHiddenInstance
{
    const PREFIX: &'static str = "Session";
    const INDEX: u8 = 0u8;
}
/// Genesis config for the module, allow to build genesis storage.
#[cfg(feature = "std")]
#[serde(rename_all = "camelCase")]
#[serde(deny_unknown_fields)]
#[serde(crate = "self :: sp_api_hidden_includes_decl_storage :: hidden_include::serde")]
#[serde(bound(
    serialize = "Vec < (T :: AccountId, T :: ValidatorId, T :: Keys) > : self :: sp_api_hidden_includes_decl_storage :: hidden_include::serde::Serialize, "
))]
#[serde(bound(
    deserialize = "Vec < (T :: AccountId, T :: ValidatorId, T :: Keys) > : self :: sp_api_hidden_includes_decl_storage :: hidden_include::serde::de::DeserializeOwned, "
))]
pub struct GenesisConfig<T: Config> {
    pub keys: Vec<(T::AccountId, T::ValidatorId, T::Keys)>,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    use self::sp_api_hidden_includes_decl_storage::hidden_include::serde as _serde;
    #[automatically_derived]
    impl<T: Config> self::sp_api_hidden_includes_decl_storage::hidden_include::serde::Serialize
        for GenesisConfig<T>
    where
        Vec<(T::AccountId, T::ValidatorId, T::Keys)>:
            self::sp_api_hidden_includes_decl_storage::hidden_include::serde::Serialize,
    {
        fn serialize < __S > (& self , __serializer : __S) -> self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: __private :: Result < __S :: Ok , __S :: Error > where __S : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: Serializer{
            let mut __serde_state = match _serde::Serializer::serialize_struct(
                __serializer,
                "GenesisConfig",
                false as usize + 1,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "keys",
                &self.keys,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    use self::sp_api_hidden_includes_decl_storage::hidden_include::serde as _serde;
    #[automatically_derived]
    impl<'de, T: Config>
        self::sp_api_hidden_includes_decl_storage::hidden_include::serde::Deserialize<'de>
        for GenesisConfig<T>
    where
        Vec<(T::AccountId, T::ValidatorId, T::Keys)>:
            self::sp_api_hidden_includes_decl_storage::hidden_include::serde::de::DeserializeOwned,
    {
        fn deserialize < __D > (__deserializer : __D) -> self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: __private :: Result < Self , __D :: Error > where __D : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: Deserializer < 'de >{
            #[allow(non_camel_case_types)]
            enum __Field {
                __field0,
            }
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "field identifier")
                }
                fn visit_u64<__E>(self, __value: u64) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        _ => _serde::__private::Err(_serde::de::Error::invalid_value(
                            _serde::de::Unexpected::Unsigned(__value),
                            &"field index 0 <= i < 1",
                        )),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "keys" => _serde::__private::Ok(__Field::__field0),
                        _ => _serde::__private::Err(_serde::de::Error::unknown_field(
                            __value, FIELDS,
                        )),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"keys" => _serde::__private::Ok(__Field::__field0),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(_serde::de::Error::unknown_field(
                                __value, FIELDS,
                            ))
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(__deserializer, __FieldVisitor)
                }
            }
            struct __Visitor < 'de , T : Config > where Vec < (T :: AccountId , T :: ValidatorId , T :: Keys) > : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: de :: DeserializeOwned { marker : _serde :: __private :: PhantomData < GenesisConfig < T > > , lifetime : _serde :: __private :: PhantomData < & 'de () > , }
            impl < 'de , T : Config > _serde :: de :: Visitor < 'de > for __Visitor < 'de , T > where Vec < (T :: AccountId , T :: ValidatorId , T :: Keys) > : self :: sp_api_hidden_includes_decl_storage :: hidden_include :: serde :: de :: DeserializeOwned { type Value = GenesisConfig < T > ; fn expecting (& self , __formatter : & mut _serde :: __private :: Formatter) -> _serde :: __private :: fmt :: Result { _serde :: __private :: Formatter :: write_str (__formatter , "struct GenesisConfig") } # [inline] fn visit_seq < __A > (self , mut __seq : __A) -> _serde :: __private :: Result < Self :: Value , __A :: Error > where __A : _serde :: de :: SeqAccess < 'de > { let __field0 = match match _serde :: de :: SeqAccess :: next_element :: < Vec < (T :: AccountId , T :: ValidatorId , T :: Keys) > > (& mut __seq) { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } } { _serde :: __private :: Some (__value) => __value , _serde :: __private :: None => { return _serde :: __private :: Err (_serde :: de :: Error :: invalid_length (0usize , & "struct GenesisConfig with 1 element")) ; } } ; _serde :: __private :: Ok (GenesisConfig { keys : __field0 , }) } # [inline] fn visit_map < __A > (self , mut __map : __A) -> _serde :: __private :: Result < Self :: Value , __A :: Error > where __A : _serde :: de :: MapAccess < 'de > { let mut __field0 : _serde :: __private :: Option < Vec < (T :: AccountId , T :: ValidatorId , T :: Keys) > > = _serde :: __private :: None ; while let _serde :: __private :: Some (__key) = match _serde :: de :: MapAccess :: next_key :: < __Field > (& mut __map) { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } } { match __key { __Field :: __field0 => { if _serde :: __private :: Option :: is_some (& __field0) { return _serde :: __private :: Err (< __A :: Error as _serde :: de :: Error > :: duplicate_field ("keys")) ; } __field0 = _serde :: __private :: Some (match _serde :: de :: MapAccess :: next_value :: < Vec < (T :: AccountId , T :: ValidatorId , T :: Keys) > > (& mut __map) { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } }) ; } } } let __field0 = match __field0 { _serde :: __private :: Some (__field0) => __field0 , _serde :: __private :: None => match _serde :: __private :: de :: missing_field ("keys") { _serde :: __private :: Ok (__val) => __val , _serde :: __private :: Err (__err) => { return _serde :: __private :: Err (__err) ; } } , } ; _serde :: __private :: Ok (GenesisConfig { keys : __field0 , }) } }
            const FIELDS: &'static [&'static str] = &["keys"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "GenesisConfig",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<GenesisConfig<T>>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[cfg(feature = "std")]
impl<T: Config> Default for GenesisConfig<T> {
    fn default() -> Self {
        GenesisConfig {
            keys: Default::default(),
        }
    }
}
#[cfg(feature = "std")]
impl<T: Config> GenesisConfig<T> {
    /// Build the storage for this module.
    pub fn build_storage(
        &self,
    ) -> std::result::Result<
        self::sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::Storage,
        String,
    > {
        let mut storage = Default::default();
        self.assimilate_storage(&mut storage)?;
        Ok(storage)
    }
    /// Assimilate the storage for this module into pre-existing overlays.
    pub fn assimilate_storage(
        &self,
        storage : & mut self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_runtime :: Storage,
    ) -> std::result::Result<(), String> {
        self :: sp_api_hidden_includes_decl_storage :: hidden_include :: BasicExternalities :: execute_with_storage (storage , | | { let extra_genesis_builder : fn (& Self) = | config : & GenesisConfig < T > | { if T :: SessionHandler :: KEY_TYPE_IDS . len () != T :: Keys :: key_ids () . len () { { :: std :: rt :: begin_panic ("Number of keys in session handler and session keys does not match") } ; } T :: SessionHandler :: KEY_TYPE_IDS . iter () . zip (T :: Keys :: key_ids ()) . enumerate () . for_each (| (i , (sk , kk)) | { if sk != kk { { :: std :: rt :: panic_fmt (:: core :: fmt :: Arguments :: new_v1 (& ["Session handler and session key expect different key type at index: "] , & match (& i ,) { _args => [:: core :: fmt :: ArgumentV1 :: new (_args . 0 , :: core :: fmt :: Display :: fmt)] , })) } ; } }) ; for (account , val , keys) in config . keys . iter () . cloned () { < Module < T > > :: inner_set_keys (& val , keys) . expect ("genesis config must not contain duplicates; qed") ; if frame_system :: Pallet :: < T > :: inc_consumers (& account) . is_err () { frame_system :: Pallet :: < T > :: inc_providers (& account) ; } } let initial_validators_0 = T :: SessionManager :: new_session_genesis (0) . unwrap_or_else (| | { frame_support :: print ("No initial validator provided by `SessionManager`, use \
						session config keys to generate initial validator set.") ; config . keys . iter () . map (| x | x . 1 . clone ()) . collect () }) ; if ! ! initial_validators_0 . is_empty () { { :: std :: rt :: begin_panic ("Empty validator set for session 0 in genesis block!") } } ; let initial_validators_1 = T :: SessionManager :: new_session_genesis (1) . unwrap_or_else (| | initial_validators_0 . clone ()) ; if ! ! initial_validators_1 . is_empty () { { :: std :: rt :: begin_panic ("Empty validator set for session 1 in genesis block!") } } ; let queued_keys : Vec < _ > = initial_validators_1 . iter () . cloned () . map (| v | (v . clone () , < Module < T > > :: load_keys (& v) . unwrap_or_default ())) . collect () ; T :: SessionHandler :: on_genesis_session :: < T :: Keys > (& queued_keys) ; < Validators < T > > :: put (initial_validators_0) ; < QueuedKeys < T > > :: put (queued_keys) ; T :: SessionManager :: start_session (0) ; } ; extra_genesis_builder (self) ; Ok (()) })
    }
}
#[cfg(feature = "std")]
impl<
        T: Config,
        __GeneratedInstance: self::sp_api_hidden_includes_decl_storage::hidden_include::traits::Instance,
    >
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::BuildModuleGenesisStorage<
        T,
        __GeneratedInstance,
    > for GenesisConfig<T>
{
    fn build_module_genesis_storage(
        &self,
        storage : & mut self :: sp_api_hidden_includes_decl_storage :: hidden_include :: sp_runtime :: Storage,
    ) -> std::result::Result<(), String> {
        self.assimilate_storage(storage)
    }
}
/// The current set of validators.
struct Validators<T: Config>(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T,)>,
);
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageValue<
        Vec<T::ValidatorId>,
    > for Validators<T>
{
    type Query = Vec<T::ValidatorId>;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"Validators"
    }
    fn from_optional_value_to_query(v: Option<Vec<T::ValidatorId>>) -> Self::Query {
        v.unwrap_or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<Vec<T::ValidatorId>> {
        Some(v)
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for Validators<T>
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < Validators < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < T :: ValidatorId > > > :: module_prefix () . to_vec () , storage_name : < Validators < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < T :: ValidatorId > > > :: storage_prefix () . to_vec () , prefix : < Validators < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < T :: ValidatorId > > > :: storage_value_final_key () . to_vec () , max_values : Some (1) , max_size : None , }])
    }
}
/// Current index of the session.
struct CurrentIndex(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<()>,
);
impl
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageValue<
        SessionIndex,
    > for CurrentIndex
{
    type Query = SessionIndex;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"CurrentIndex"
    }
    fn from_optional_value_to_query(v: Option<SessionIndex>) -> Self::Query {
        v.unwrap_or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<SessionIndex> {
        Some(v)
    }
}
impl self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for CurrentIndex
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < CurrentIndex < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < SessionIndex > > :: module_prefix () . to_vec () , storage_name : < CurrentIndex < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < SessionIndex > > :: storage_prefix () . to_vec () , prefix : < CurrentIndex < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < SessionIndex > > :: storage_value_final_key () . to_vec () , max_values : Some (1) , max_size : None , }])
    }
}
/// True if the underlying economic identities or weighting behind the validators
/// has changed in the queued validator set.
struct QueuedChanged(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<()>,
);
impl
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageValue<
        bool,
    > for QueuedChanged
{
    type Query = bool;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"QueuedChanged"
    }
    fn from_optional_value_to_query(v: Option<bool>) -> Self::Query {
        v.unwrap_or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<bool> {
        Some(v)
    }
}
impl self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for QueuedChanged
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < QueuedChanged < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < bool > > :: module_prefix () . to_vec () , storage_name : < QueuedChanged < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < bool > > :: storage_prefix () . to_vec () , prefix : < QueuedChanged < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < bool > > :: storage_value_final_key () . to_vec () , max_values : Some (1) , max_size : None , }])
    }
}
/// The queued keys for the next session. When the next session begins, these keys
/// will be used to determine the validator's session keys.
struct QueuedKeys<T: Config>(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T,)>,
);
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageValue<
        Vec<(T::ValidatorId, T::Keys)>,
    > for QueuedKeys<T>
{
    type Query = Vec<(T::ValidatorId, T::Keys)>;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"QueuedKeys"
    }
    fn from_optional_value_to_query(v: Option<Vec<(T::ValidatorId, T::Keys)>>) -> Self::Query {
        v.unwrap_or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<Vec<(T::ValidatorId, T::Keys)>> {
        Some(v)
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for QueuedKeys<T>
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < QueuedKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < (T :: ValidatorId , T :: Keys) > > > :: module_prefix () . to_vec () , storage_name : < QueuedKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < (T :: ValidatorId , T :: Keys) > > > :: storage_prefix () . to_vec () , prefix : < QueuedKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < (T :: ValidatorId , T :: Keys) > > > :: storage_value_final_key () . to_vec () , max_values : Some (1) , max_size : None , }])
    }
}
/// Indices of disabled validators.
///
/// The set is cleared when `on_session_ending` returns a new set of identities.
struct DisabledValidators(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<()>,
);
impl
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageValue<
        Vec<u32>,
    > for DisabledValidators
{
    type Query = Vec<u32>;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"DisabledValidators"
    }
    fn from_optional_value_to_query(v: Option<Vec<u32>>) -> Self::Query {
        v.unwrap_or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<Vec<u32>> {
        Some(v)
    }
}
impl self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for DisabledValidators
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < DisabledValidators < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < u32 > > > :: module_prefix () . to_vec () , storage_name : < DisabledValidators < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < u32 > > > :: storage_prefix () . to_vec () , prefix : < DisabledValidators < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: generator :: StorageValue < Vec < u32 > > > :: storage_value_final_key () . to_vec () , max_values : Some (1) , max_size : None , }])
    }
}
/// The next session keys for a validator.
struct NextKeys<T: Config>(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T,)>,
);
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::StoragePrefixedMap<T::Keys>
    for NextKeys<T>
{
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"NextKeys"
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageMap<
        T::ValidatorId,
        T::Keys,
    > for NextKeys<T>
{
    type Query = Option<T::Keys>;
    type Hasher = self::sp_api_hidden_includes_decl_storage::hidden_include::Twox64Concat;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"NextKeys"
    }
    fn from_optional_value_to_query(v: Option<T::Keys>) -> Self::Query {
        v.or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<T::Keys> {
        v
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for NextKeys<T>
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < NextKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: Keys > > :: module_prefix () . to_vec () , storage_name : < NextKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: Keys > > :: storage_prefix () . to_vec () , prefix : < NextKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: Keys > > :: final_prefix () . to_vec () , max_values : None , max_size : None , }])
    }
}
/// The owner of a key. The key is the `KeyTypeId` + the encoded key.
struct KeyOwner<T: Config>(
    self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::marker::PhantomData<(T,)>,
);
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::StoragePrefixedMap<
        T::ValidatorId,
    > for KeyOwner<T>
{
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"KeyOwner"
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::storage::generator::StorageMap<
        (KeyTypeId, Vec<u8>),
        T::ValidatorId,
    > for KeyOwner<T>
{
    type Query = Option<T::ValidatorId>;
    type Hasher = self::sp_api_hidden_includes_decl_storage::hidden_include::Twox64Concat;
    fn module_prefix() -> &'static [u8] {
        < __InherentHiddenInstance as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: Instance > :: PREFIX . as_bytes ()
    }
    fn storage_prefix() -> &'static [u8] {
        b"KeyOwner"
    }
    fn from_optional_value_to_query(v: Option<T::ValidatorId>) -> Self::Query {
        v.or_else(|| Default::default())
    }
    fn from_query_to_optional_value(v: Self::Query) -> Option<T::ValidatorId> {
        v
    }
}
impl<T: Config>
    self::sp_api_hidden_includes_decl_storage::hidden_include::traits::PartialStorageInfoTrait
    for KeyOwner<T>
{
    fn partial_storage_info(
    ) -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        < [_] > :: into_vec (box [self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: StorageInfo { pallet_name : < KeyOwner < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: ValidatorId > > :: module_prefix () . to_vec () , storage_name : < KeyOwner < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: ValidatorId > > :: storage_prefix () . to_vec () , prefix : < KeyOwner < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: storage :: StoragePrefixedMap < T :: ValidatorId > > :: final_prefix () . to_vec () , max_values : None , max_size : None , }])
    }
}
impl<T: Config + 'static>
    self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfoTrait
    for Module<T>
{
    fn storage_info() -> self::sp_api_hidden_includes_decl_storage::hidden_include::sp_std::vec::Vec<
        self::sp_api_hidden_includes_decl_storage::hidden_include::traits::StorageInfo,
    > {
        let mut res = ::alloc::vec::Vec::new();
        let mut storage_info = < Validators < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < CurrentIndex < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < QueuedChanged < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < QueuedKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < DisabledValidators < > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < NextKeys < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        let mut storage_info = < KeyOwner < T > as self :: sp_api_hidden_includes_decl_storage :: hidden_include :: traits :: PartialStorageInfoTrait > :: partial_storage_info () ;
        res.append(&mut storage_info);
        res
    }
}
/// Events for this module.
///
pub enum Event {
    /// New session has happened. Note that the argument is the \[session_index\], not the block
    /// number as the type might suggest.
    NewSession(SessionIndex),
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::clone::Clone for Event {
    #[inline]
    fn clone(&self) -> Event {
        match (&*self,) {
            (&Event::NewSession(ref __self_0),) => {
                Event::NewSession(::core::clone::Clone::clone(&(*__self_0)))
            }
        }
    }
}
impl ::core::marker::StructuralPartialEq for Event {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::PartialEq for Event {
    #[inline]
    fn eq(&self, other: &Event) -> bool {
        match (&*self, &*other) {
            (&Event::NewSession(ref __self_0), &Event::NewSession(ref __arg_1_0)) => {
                (*__self_0) == (*__arg_1_0)
            }
        }
    }
    #[inline]
    fn ne(&self, other: &Event) -> bool {
        match (&*self, &*other) {
            (&Event::NewSession(ref __self_0), &Event::NewSession(ref __arg_1_0)) => {
                (*__self_0) != (*__arg_1_0)
            }
        }
    }
}
impl ::core::marker::StructuralEq for Event {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::cmp::Eq for Event {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        {
            let _: ::core::cmp::AssertParamIsEq<SessionIndex>;
        }
    }
}
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl _parity_scale_codec::Encode for Event {
        fn encode_to<__CodecOutputEdqy: _parity_scale_codec::Output + ?Sized>(
            &self,
            __codec_dest_edqy: &mut __CodecOutputEdqy,
        ) {
            match *self {
                Event::NewSession(ref aa) => {
                    __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    _parity_scale_codec::Encode::encode_to(aa, __codec_dest_edqy);
                }
                _ => (),
            }
        }
    }
    impl _parity_scale_codec::EncodeLike for Event {}
};
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl _parity_scale_codec::Decode for Event {
        fn decode<__CodecInputEdqy: _parity_scale_codec::Input>(
            __codec_input_edqy: &mut __CodecInputEdqy,
        ) -> ::core::result::Result<Self, _parity_scale_codec::Error> {
            match __codec_input_edqy
                .read_byte()
                .map_err(|e| e.chain("Could not decode `Event`, failed to read variant byte"))?
            {
                __codec_x_edqy if __codec_x_edqy == 0usize as ::core::primitive::u8 => {
                    ::core::result::Result::Ok(Event::NewSession({
                        let __codec_res_edqy =
                            <SessionIndex as _parity_scale_codec::Decode>::decode(
                                __codec_input_edqy,
                            );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Event::NewSession.0`"),
                                )
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                        }
                    }))
                }
                _ => ::core::result::Result::Err(
                    "Could not decode `Event`, variant doesn\'t exist".into(),
                ),
            }
        }
    }
};
impl core::fmt::Debug for Event {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        match self {
            Self::NewSession(ref a0) => fmt.debug_tuple("Event::NewSession").field(a0).finish(),
            _ => Ok(()),
        }
    }
}
impl From<Event> for () {
    fn from(_: Event) -> () {
        ()
    }
}
impl Event {
    #[allow(dead_code)]
    #[doc(hidden)]
    pub fn metadata() -> &'static [::frame_support::event::EventMetadata] {
        &[::frame_support::event::EventMetadata {
            name: ::frame_support::event::DecodeDifferent::Encode("NewSession"),
            arguments: ::frame_support::event::DecodeDifferent::Encode(&["SessionIndex"]),
            documentation: ::frame_support::event::DecodeDifferent::Encode(&[
                r" New session has happened. Note that the argument is the \[session_index\], not the block",
                r" number as the type might suggest.",
            ]),
        }]
    }
}
/// Error for the session module.
pub enum Error<T: Config> {
    #[doc(hidden)]
    __Ignore(
        ::frame_support::sp_std::marker::PhantomData<(T,)>,
        ::frame_support::Never,
    ),
    /// Invalid ownership proof.
    InvalidProof,
    /// No associated validator ID for account.
    NoAssociatedValidatorId,
    /// Registered duplicate key.
    DuplicatedKey,
    /// No keys are associated with this account.
    NoKeys,
    /// Key setting account is not live, so it's impossible to associate keys.
    NoAccount,
}
impl<T: Config> ::frame_support::sp_std::fmt::Debug for Error<T> {
    fn fmt(
        &self,
        f: &mut ::frame_support::sp_std::fmt::Formatter<'_>,
    ) -> ::frame_support::sp_std::fmt::Result {
        f.write_str(self.as_str())
    }
}
impl<T: Config> Error<T> {
    fn as_u8(&self) -> u8 {
        match self {
            Error::__Ignore(_, _) => ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                &["internal error: entered unreachable code: "],
                &match (&"`__Ignore` can never be constructed",) {
                    _args => [::core::fmt::ArgumentV1::new(
                        _args.0,
                        ::core::fmt::Display::fmt,
                    )],
                },
            )),
            Error::InvalidProof => 0,
            Error::NoAssociatedValidatorId => 0 + 1,
            Error::DuplicatedKey => 0 + 1 + 1,
            Error::NoKeys => 0 + 1 + 1 + 1,
            Error::NoAccount => 0 + 1 + 1 + 1 + 1,
        }
    }
    fn as_str(&self) -> &'static str {
        match self {
            Self::__Ignore(_, _) => ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                &["internal error: entered unreachable code: "],
                &match (&"`__Ignore` can never be constructed",) {
                    _args => [::core::fmt::ArgumentV1::new(
                        _args.0,
                        ::core::fmt::Display::fmt,
                    )],
                },
            )),
            Error::InvalidProof => "InvalidProof",
            Error::NoAssociatedValidatorId => "NoAssociatedValidatorId",
            Error::DuplicatedKey => "DuplicatedKey",
            Error::NoKeys => "NoKeys",
            Error::NoAccount => "NoAccount",
        }
    }
}
impl<T: Config> From<Error<T>> for &'static str {
    fn from(err: Error<T>) -> &'static str {
        err.as_str()
    }
}
impl<T: Config> From<Error<T>> for ::frame_support::sp_runtime::DispatchError {
    fn from(err: Error<T>) -> Self {
        let index = <T::PalletInfo as ::frame_support::traits::PalletInfo>::index::<Module<T>>()
            .expect("Every active module has an index in the runtime; qed")
            as u8;
        ::frame_support::sp_runtime::DispatchError::Module {
            index,
            error: err.as_u8(),
            message: Some(err.as_str()),
        }
    }
}
impl<T: Config> ::frame_support::error::ModuleErrorMetadata for Error<T> {
    fn metadata() -> &'static [::frame_support::error::ErrorMetadata] {
        &[
            ::frame_support::error::ErrorMetadata {
                name: ::frame_support::error::DecodeDifferent::Encode("InvalidProof"),
                documentation: ::frame_support::error::DecodeDifferent::Encode(&[
                    r" Invalid ownership proof.",
                ]),
            },
            ::frame_support::error::ErrorMetadata {
                name: ::frame_support::error::DecodeDifferent::Encode("NoAssociatedValidatorId"),
                documentation: ::frame_support::error::DecodeDifferent::Encode(&[
                    r" No associated validator ID for account.",
                ]),
            },
            ::frame_support::error::ErrorMetadata {
                name: ::frame_support::error::DecodeDifferent::Encode("DuplicatedKey"),
                documentation: ::frame_support::error::DecodeDifferent::Encode(&[
                    r" Registered duplicate key.",
                ]),
            },
            ::frame_support::error::ErrorMetadata {
                name: ::frame_support::error::DecodeDifferent::Encode("NoKeys"),
                documentation: ::frame_support::error::DecodeDifferent::Encode(&[
                    r" No keys are associated with this account.",
                ]),
            },
            ::frame_support::error::ErrorMetadata {
                name: ::frame_support::error::DecodeDifferent::Encode("NoAccount"),
                documentation: ::frame_support::error::DecodeDifferent::Encode(&[
                    r" Key setting account is not live, so it's impossible to associate keys.",
                ]),
            },
        ]
    }
}
pub struct Module<T: Config>(::frame_support::sp_std::marker::PhantomData<(T,)>);
#[automatically_derived]
#[allow(unused_qualifications)]
impl<T: ::core::clone::Clone + Config> ::core::clone::Clone for Module<T> {
    #[inline]
    fn clone(&self) -> Module<T> {
        match *self {
            Module(ref __self_0_0) => Module(::core::clone::Clone::clone(&(*__self_0_0))),
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl<T: ::core::marker::Copy + Config> ::core::marker::Copy for Module<T> {}
impl<T: Config> ::core::marker::StructuralPartialEq for Module<T> {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl<T: ::core::cmp::PartialEq + Config> ::core::cmp::PartialEq for Module<T> {
    #[inline]
    fn eq(&self, other: &Module<T>) -> bool {
        match *other {
            Module(ref __self_1_0) => match *self {
                Module(ref __self_0_0) => (*__self_0_0) == (*__self_1_0),
            },
        }
    }
    #[inline]
    fn ne(&self, other: &Module<T>) -> bool {
        match *other {
            Module(ref __self_1_0) => match *self {
                Module(ref __self_0_0) => (*__self_0_0) != (*__self_1_0),
            },
        }
    }
}
impl<T: Config> ::core::marker::StructuralEq for Module<T> {}
#[automatically_derived]
#[allow(unused_qualifications)]
impl<T: ::core::cmp::Eq + Config> ::core::cmp::Eq for Module<T> {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {
        {
            let _: ::core::cmp::AssertParamIsEq<
                ::frame_support::sp_std::marker::PhantomData<(T,)>,
            >;
        }
    }
}
impl<T: Config> core::fmt::Debug for Module<T>
where
    T: core::fmt::Debug,
{
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.debug_tuple("Module").field(&self.0).finish()
    }
}
/// Type alias to `Module`, to be used by `construct_runtime`.
#[allow(dead_code)]
pub type Pallet<T> = Module<T>;
impl<T: frame_system::Config + Config>
    ::frame_support::traits::OnInitialize<<T as frame_system::Config>::BlockNumber> for Module<T>
{
    fn on_initialize(n: T::BlockNumber) -> Weight {
        let __within_span__ = {
            use ::tracing::__macro_support::Callsite as _;
            static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                use ::tracing::__macro_support::MacroCallsite;
                static META: ::tracing::Metadata<'static> = {
                    :: tracing_core :: metadata :: Metadata :: new ("on_initialize" , "pallet_session" , :: tracing :: Level :: TRACE , Some ("/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs") , Some (515u32) , Some ("pallet_session") , :: tracing_core :: field :: FieldSet :: new (& [] , :: tracing_core :: callsite :: Identifier (& CALLSITE)) , :: tracing :: metadata :: Kind :: SPAN)
                };
                MacroCallsite::new(&META)
            };
            let mut interest = ::tracing::subscriber::Interest::never();
            if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                && {
                    interest = CALLSITE.interest();
                    !interest.is_never()
                }
                && CALLSITE.is_enabled(interest)
            {
                let meta = CALLSITE.metadata();
                ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
            } else {
                let span = CALLSITE.disabled_span();
                if match ::tracing::Level::TRACE {
                    ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                    ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                    ::tracing::Level::INFO => ::tracing::log::Level::Info,
                    ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                    _ => ::tracing::log::Level::Trace,
                } <= ::tracing::log::STATIC_MAX_LEVEL
                {
                    if !::tracing::dispatcher::has_been_set() {
                        {
                            span.record_all(&{ CALLSITE.metadata().fields().value_set(&[]) });
                        }
                    } else {
                        {}
                    }
                } else {
                    {}
                };
                span
            }
        };
        let __tracing_guard__ = __within_span__.enter();
        {
            if T::ShouldEndSession::should_end_session(n) {
                Self::rotate_session();
                T::BlockWeights::get().max_block
            } else {
                0
            }
        }
    }
}
impl<T: Config> ::frame_support::traits::OnRuntimeUpgrade for Module<T> {
    fn on_runtime_upgrade() -> ::frame_support::dispatch::Weight {
        let __within_span__ = {
            use ::tracing::__macro_support::Callsite as _;
            static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                use ::tracing::__macro_support::MacroCallsite;
                static META: ::tracing::Metadata<'static> = {
                    :: tracing_core :: metadata :: Metadata :: new ("on_runtime_upgrade" , "pallet_session" , :: tracing :: Level :: TRACE , Some ("/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs") , Some (515u32) , Some ("pallet_session") , :: tracing_core :: field :: FieldSet :: new (& [] , :: tracing_core :: callsite :: Identifier (& CALLSITE)) , :: tracing :: metadata :: Kind :: SPAN)
                };
                MacroCallsite::new(&META)
            };
            let mut interest = ::tracing::subscriber::Interest::never();
            if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                && {
                    interest = CALLSITE.interest();
                    !interest.is_never()
                }
                && CALLSITE.is_enabled(interest)
            {
                let meta = CALLSITE.metadata();
                ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
            } else {
                let span = CALLSITE.disabled_span();
                if match ::tracing::Level::TRACE {
                    ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                    ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                    ::tracing::Level::INFO => ::tracing::log::Level::Info,
                    ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                    _ => ::tracing::log::Level::Trace,
                } <= ::tracing::log::STATIC_MAX_LEVEL
                {
                    if !::tracing::dispatcher::has_been_set() {
                        {
                            span.record_all(&{ CALLSITE.metadata().fields().value_set(&[]) });
                        }
                    } else {
                        {}
                    }
                } else {
                    {}
                };
                span
            }
        };
        let __tracing_guard__ = __within_span__.enter();
        let pallet_name = < < T as frame_system :: Config > :: PalletInfo as :: frame_support :: traits :: PalletInfo > :: name :: < Self > () . unwrap_or ("<unknown pallet name>") ;
        {
            let lvl = ::log::Level::Info;
            if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                :: log :: __private_api_log (:: core :: fmt :: Arguments :: new_v1 (& ["\u{2705} no migration for "] , & match (& pallet_name ,) { _args => [:: core :: fmt :: ArgumentV1 :: new (_args . 0 , :: core :: fmt :: Display :: fmt)] , }) , lvl , & (:: frame_support :: LOG_TARGET , "pallet_session" , "/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs" , 515u32)) ;
            }
        };
        0
    }
}
impl<T: frame_system::Config + Config>
    ::frame_support::traits::OnFinalize<<T as frame_system::Config>::BlockNumber> for Module<T>
{
}
impl<T: frame_system::Config + Config>
    ::frame_support::traits::OnIdle<<T as frame_system::Config>::BlockNumber> for Module<T>
{
}
impl<T: frame_system::Config + Config>
    ::frame_support::traits::OffchainWorker<<T as frame_system::Config>::BlockNumber>
    for Module<T>
{
}
impl<T: Config> Module<T> {
    /// Deposits an event using `frame_system::Pallet::deposit_event`.
    fn deposit_event(event: impl Into<<T as Config>::Event>) {
        <frame_system::Pallet<T>>::deposit_event(event.into())
    }
}
#[cfg(feature = "std")]
impl<T: Config> ::frame_support::traits::IntegrityTest for Module<T> {}
/// Can also be called using [`Call`].
///
/// [`Call`]: enum.Call.html
impl<T: Config> Module<T> {
    /// Sets the session key(s) of the function caller to `keys`.
    /// Allows an account to set its session key prior to becoming a validator.
    /// This doesn't take effect until the next session.
    ///
    /// The dispatch origin of this function must be signed.
    ///
    /// # <weight>
    /// - Complexity: `O(1)`
    ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
    /// - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
    /// - DbWrites: `origin account`, `NextKeys`
    /// - DbReads per key id: `KeyOwner`
    /// - DbWrites per key id: `KeyOwner`
    /// # </weight>
    ///
    /// NOTE: Calling this function will bypass origin filters.
    pub fn set_keys(origin: T::Origin, keys: T::Keys, proof: Vec<u8>) -> dispatch::DispatchResult {
        let __within_span__ = {
            use ::tracing::__macro_support::Callsite as _;
            static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                use ::tracing::__macro_support::MacroCallsite;
                static META: ::tracing::Metadata<'static> = {
                    :: tracing_core :: metadata :: Metadata :: new ("set_keys" , "pallet_session" , :: tracing :: Level :: TRACE , Some ("/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs") , Some (515u32) , Some ("pallet_session") , :: tracing_core :: field :: FieldSet :: new (& [] , :: tracing_core :: callsite :: Identifier (& CALLSITE)) , :: tracing :: metadata :: Kind :: SPAN)
                };
                MacroCallsite::new(&META)
            };
            let mut interest = ::tracing::subscriber::Interest::never();
            if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                && {
                    interest = CALLSITE.interest();
                    !interest.is_never()
                }
                && CALLSITE.is_enabled(interest)
            {
                let meta = CALLSITE.metadata();
                ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
            } else {
                let span = CALLSITE.disabled_span();
                if match ::tracing::Level::TRACE {
                    ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                    ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                    ::tracing::Level::INFO => ::tracing::log::Level::Info,
                    ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                    _ => ::tracing::log::Level::Trace,
                } <= ::tracing::log::STATIC_MAX_LEVEL
                {
                    if !::tracing::dispatcher::has_been_set() {
                        {
                            span.record_all(&{ CALLSITE.metadata().fields().value_set(&[]) });
                        }
                    } else {
                        {}
                    }
                } else {
                    {}
                };
                span
            }
        };
        let __tracing_guard__ = __within_span__.enter();
        let who = ensure_signed(origin)?;
        {
            if !keys.ownership_proof_is_valid(&proof) {
                {
                    return Err(Error::<T>::InvalidProof.into());
                };
            }
        };
        Self::do_set_keys(&who, keys)?;
        Ok(())
    }
    #[allow(unreachable_code)]
    /// Removes any session key(s) of the function caller.
    /// This doesn't take effect until the next session.
    ///
    /// The dispatch origin of this function must be signed.
    ///
    /// # <weight>
    /// - Complexity: `O(1)` in number of key types.
    ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
    /// - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
    /// - DbWrites: `NextKeys`, `origin account`
    /// - DbWrites per key id: `KeyOwner`
    /// # </weight>
    ///
    /// NOTE: Calling this function will bypass origin filters.
    pub fn purge_keys(origin: T::Origin) -> ::frame_support::dispatch::DispatchResult {
        let __within_span__ = {
            use ::tracing::__macro_support::Callsite as _;
            static CALLSITE: ::tracing::__macro_support::MacroCallsite = {
                use ::tracing::__macro_support::MacroCallsite;
                static META: ::tracing::Metadata<'static> = {
                    :: tracing_core :: metadata :: Metadata :: new ("purge_keys" , "pallet_session" , :: tracing :: Level :: TRACE , Some ("/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs") , Some (515u32) , Some ("pallet_session") , :: tracing_core :: field :: FieldSet :: new (& [] , :: tracing_core :: callsite :: Identifier (& CALLSITE)) , :: tracing :: metadata :: Kind :: SPAN)
                };
                MacroCallsite::new(&META)
            };
            let mut interest = ::tracing::subscriber::Interest::never();
            if ::tracing::Level::TRACE <= ::tracing::level_filters::STATIC_MAX_LEVEL
                && ::tracing::Level::TRACE <= ::tracing::level_filters::LevelFilter::current()
                && {
                    interest = CALLSITE.interest();
                    !interest.is_never()
                }
                && CALLSITE.is_enabled(interest)
            {
                let meta = CALLSITE.metadata();
                ::tracing::Span::new(meta, &{ meta.fields().value_set(&[]) })
            } else {
                let span = CALLSITE.disabled_span();
                if match ::tracing::Level::TRACE {
                    ::tracing::Level::ERROR => ::tracing::log::Level::Error,
                    ::tracing::Level::WARN => ::tracing::log::Level::Warn,
                    ::tracing::Level::INFO => ::tracing::log::Level::Info,
                    ::tracing::Level::DEBUG => ::tracing::log::Level::Debug,
                    _ => ::tracing::log::Level::Trace,
                } <= ::tracing::log::STATIC_MAX_LEVEL
                {
                    if !::tracing::dispatcher::has_been_set() {
                        {
                            span.record_all(&{ CALLSITE.metadata().fields().value_set(&[]) });
                        }
                    } else {
                        {}
                    }
                } else {
                    {}
                };
                span
            }
        };
        let __tracing_guard__ = __within_span__.enter();
        {
            let who = ensure_signed(origin)?;
            Self::do_purge_keys(&who)?;
        }
        Ok(())
    }
}
/// Dispatchable calls.
///
/// Each variant of this enum maps to a dispatchable function from the associated module.
pub enum Call<T: Config> {
    #[doc(hidden)]
    #[codec(skip)]
    __PhantomItem(
        ::frame_support::sp_std::marker::PhantomData<(T,)>,
        ::frame_support::Never,
    ),
    #[allow(non_camel_case_types)]
    /// Sets the session key(s) of the function caller to `keys`.
    /// Allows an account to set its session key prior to becoming a validator.
    /// This doesn't take effect until the next session.
    ///
    /// The dispatch origin of this function must be signed.
    ///
    /// # <weight>
    /// - Complexity: `O(1)`
    ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
    /// - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
    /// - DbWrites: `origin account`, `NextKeys`
    /// - DbReads per key id: `KeyOwner`
    /// - DbWrites per key id: `KeyOwner`
    /// # </weight>
    set_keys(T::Keys, Vec<u8>),
    #[allow(non_camel_case_types)]
    /// Removes any session key(s) of the function caller.
    /// This doesn't take effect until the next session.
    ///
    /// The dispatch origin of this function must be signed.
    ///
    /// # <weight>
    /// - Complexity: `O(1)` in number of key types.
    ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
    /// - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
    /// - DbWrites: `NextKeys`, `origin account`
    /// - DbWrites per key id: `KeyOwner`
    /// # </weight>
    purge_keys(),
}
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl<T: Config> _parity_scale_codec::Encode for Call<T>
    where
        T::Keys: _parity_scale_codec::Encode,
        T::Keys: _parity_scale_codec::Encode,
    {
        fn encode_to<__CodecOutputEdqy: _parity_scale_codec::Output + ?Sized>(
            &self,
            __codec_dest_edqy: &mut __CodecOutputEdqy,
        ) {
            match *self {
                Call::set_keys(ref aa, ref ba) => {
                    __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    _parity_scale_codec::Encode::encode_to(aa, __codec_dest_edqy);
                    _parity_scale_codec::Encode::encode_to(ba, __codec_dest_edqy);
                }
                Call::purge_keys() => {
                    __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                }
                _ => (),
            }
        }
    }
    impl<T: Config> _parity_scale_codec::EncodeLike for Call<T>
    where
        T::Keys: _parity_scale_codec::Encode,
        T::Keys: _parity_scale_codec::Encode,
    {
    }
};
const _: () = {
    #[allow(unknown_lints)]
    #[allow(rust_2018_idioms)]
    extern crate codec as _parity_scale_codec;
    impl<T: Config> _parity_scale_codec::Decode for Call<T>
    where
        T::Keys: _parity_scale_codec::Decode,
        T::Keys: _parity_scale_codec::Decode,
    {
        fn decode<__CodecInputEdqy: _parity_scale_codec::Input>(
            __codec_input_edqy: &mut __CodecInputEdqy,
        ) -> ::core::result::Result<Self, _parity_scale_codec::Error> {
            match __codec_input_edqy
                .read_byte()
                .map_err(|e| e.chain("Could not decode `Call`, failed to read variant byte"))?
            {
                __codec_x_edqy if __codec_x_edqy == 0usize as ::core::primitive::u8 => {
                    ::core::result::Result::Ok(Call::<T>::set_keys(
                        {
                            let __codec_res_edqy = <T::Keys as _parity_scale_codec::Decode>::decode(
                                __codec_input_edqy,
                            );
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) => {
                                    return ::core::result::Result::Err(
                                        e.chain("Could not decode `Call::set_keys.0`"),
                                    )
                                }
                                ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                            }
                        },
                        {
                            let __codec_res_edqy = <Vec<u8> as _parity_scale_codec::Decode>::decode(
                                __codec_input_edqy,
                            );
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) => {
                                    return ::core::result::Result::Err(
                                        e.chain("Could not decode `Call::set_keys.1`"),
                                    )
                                }
                                ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                            }
                        },
                    ))
                }
                __codec_x_edqy if __codec_x_edqy == 1usize as ::core::primitive::u8 => {
                    ::core::result::Result::Ok(Call::<T>::purge_keys())
                }
                _ => ::core::result::Result::Err(
                    "Could not decode `Call`, variant doesn\'t exist".into(),
                ),
            }
        }
    }
};
impl<T: Config> ::frame_support::traits::GetStorageVersion for Module<T> {
    fn current_storage_version() -> ::frame_support::traits::StorageVersion {
        Default::default()
    }
    fn on_chain_storage_version() -> ::frame_support::traits::StorageVersion {
        ::frame_support::traits::StorageVersion::get::<Self>()
    }
}
impl<T: Config> ::frame_support::dispatch::GetDispatchInfo for Call<T> {
    fn get_dispatch_info(&self) -> ::frame_support::dispatch::DispatchInfo {
        match *self {
            Call::set_keys(ref keys, ref proof) => {
                let __pallet_base_weight = T::WeightInfo::set_keys();
                let __pallet_weight =
                    <dyn ::frame_support::dispatch::WeighData<(&T::Keys, &Vec<u8>)>>::weigh_data(
                        &__pallet_base_weight,
                        (keys, proof),
                    );
                let __pallet_class = <dyn ::frame_support::dispatch::ClassifyDispatch<(
                    &T::Keys,
                    &Vec<u8>,
                )>>::classify_dispatch(
                    &__pallet_base_weight, (keys, proof)
                );
                let __pallet_pays_fee =
                    <dyn ::frame_support::dispatch::PaysFee<(&T::Keys, &Vec<u8>)>>::pays_fee(
                        &__pallet_base_weight,
                        (keys, proof),
                    );
                ::frame_support::dispatch::DispatchInfo {
                    weight: __pallet_weight,
                    class: __pallet_class,
                    pays_fee: __pallet_pays_fee,
                }
            }
            Call::purge_keys() => {
                let __pallet_base_weight = T::WeightInfo::purge_keys();
                let __pallet_weight = <dyn ::frame_support::dispatch::WeighData<()>>::weigh_data(
                    &__pallet_base_weight,
                    (),
                );
                let __pallet_class =
                    <dyn ::frame_support::dispatch::ClassifyDispatch<()>>::classify_dispatch(
                        &__pallet_base_weight,
                        (),
                    );
                let __pallet_pays_fee = <dyn ::frame_support::dispatch::PaysFee<()>>::pays_fee(
                    &__pallet_base_weight,
                    (),
                );
                ::frame_support::dispatch::DispatchInfo {
                    weight: __pallet_weight,
                    class: __pallet_class,
                    pays_fee: __pallet_pays_fee,
                }
            }
            Call::__PhantomItem(_, _) => {
                ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                    &["internal error: entered unreachable code: "],
                    &match (&"__PhantomItem should never be used.",) {
                        _args => [::core::fmt::ArgumentV1::new(
                            _args.0,
                            ::core::fmt::Display::fmt,
                        )],
                    },
                ))
            }
        }
    }
}
impl<T: Config> ::frame_support::traits::PalletInfoAccess for Module<T> {
    fn index() -> usize {
        <<T as frame_system::Config>::PalletInfo as ::frame_support::traits::PalletInfo>::index::<
            Self,
        >()
        .expect(
            "Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime",
        )
    }
    fn name() -> &'static str {
        < < T as frame_system :: Config > :: PalletInfo as :: frame_support :: traits :: PalletInfo > :: name :: < Self > () . expect ("Pallet is part of the runtime because pallet `Config` trait is \
						implemented by the runtime")
    }
}
impl<T: Config> ::frame_support::dispatch::GetCallName for Call<T> {
    fn get_call_name(&self) -> &'static str {
        match *self {
            Call::set_keys(ref keys, ref proof) => {
                let _ = (keys, proof);
                "set_keys"
            }
            Call::purge_keys() => {
                let _ = ();
                "purge_keys"
            }
            Call::__PhantomItem(_, _) => {
                ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                    &["internal error: entered unreachable code: "],
                    &match (&"__PhantomItem should never be used.",) {
                        _args => [::core::fmt::ArgumentV1::new(
                            _args.0,
                            ::core::fmt::Display::fmt,
                        )],
                    },
                ))
            }
        }
    }
    fn get_call_names() -> &'static [&'static str] {
        &["set_keys", "purge_keys"]
    }
}
impl<T: Config> ::frame_support::traits::OnGenesis for Module<T> {
    fn on_genesis() {
        let storage_version =
            <Self as ::frame_support::traits::GetStorageVersion>::current_storage_version();
        storage_version.put::<Self>();
    }
}
impl<T: Config> ::frame_support::dispatch::Clone for Call<T> {
    fn clone(&self) -> Self {
        match *self {
            Call::set_keys(ref keys, ref proof) => {
                Call::set_keys((*keys).clone(), (*proof).clone())
            }
            Call::purge_keys() => Call::purge_keys(),
            _ => ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl<T: Config> ::frame_support::dispatch::PartialEq for Call<T> {
    fn eq(&self, _other: &Self) -> bool {
        match *self {
            Call::set_keys(ref keys, ref proof) => {
                let self_params = (keys, proof);
                if let Call::set_keys(ref keys, ref proof) = *_other {
                    self_params == (keys, proof)
                } else {
                    match *_other {
                        Call::__PhantomItem(_, _) => {
                            ::core::panicking::panic("internal error: entered unreachable code")
                        }
                        _ => false,
                    }
                }
            }
            Call::purge_keys() => {
                let self_params = ();
                if let Call::purge_keys() = *_other {
                    self_params == ()
                } else {
                    match *_other {
                        Call::__PhantomItem(_, _) => {
                            ::core::panicking::panic("internal error: entered unreachable code")
                        }
                        _ => false,
                    }
                }
            }
            _ => ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl<T: Config> ::frame_support::dispatch::Eq for Call<T> {}
impl<T: Config> ::frame_support::dispatch::fmt::Debug for Call<T> {
    fn fmt(
        &self,
        _f: &mut ::frame_support::dispatch::fmt::Formatter,
    ) -> ::frame_support::dispatch::result::Result<(), ::frame_support::dispatch::fmt::Error> {
        match *self {
            Call::set_keys(ref keys, ref proof) => _f.write_fmt(::core::fmt::Arguments::new_v1(
                &["", ""],
                &match (&"set_keys", &(keys.clone(), proof.clone())) {
                    _args => [
                        ::core::fmt::ArgumentV1::new(_args.0, ::core::fmt::Display::fmt),
                        ::core::fmt::ArgumentV1::new(_args.1, ::core::fmt::Debug::fmt),
                    ],
                },
            )),
            Call::purge_keys() => _f.write_fmt(::core::fmt::Arguments::new_v1(
                &["", ""],
                &match (&"purge_keys", &()) {
                    _args => [
                        ::core::fmt::ArgumentV1::new(_args.0, ::core::fmt::Display::fmt),
                        ::core::fmt::ArgumentV1::new(_args.1, ::core::fmt::Debug::fmt),
                    ],
                },
            )),
            _ => ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl<T: Config> ::frame_support::traits::UnfilteredDispatchable for Call<T> {
    type Origin = T::Origin;
    fn dispatch_bypass_filter(
        self,
        _origin: Self::Origin,
    ) -> ::frame_support::dispatch::DispatchResultWithPostInfo {
        match self {
            Call::set_keys(keys, proof) => <Module<T>>::set_keys(_origin, keys, proof)
                .map(Into::into)
                .map_err(Into::into),
            Call::purge_keys() => <Module<T>>::purge_keys(_origin)
                .map(Into::into)
                .map_err(Into::into),
            Call::__PhantomItem(_, _) => {
                ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                    &["internal error: entered unreachable code: "],
                    &match (&"__PhantomItem should never be used.",) {
                        _args => [::core::fmt::ArgumentV1::new(
                            _args.0,
                            ::core::fmt::Display::fmt,
                        )],
                    },
                ))
            }
        }
    }
}
impl<T: Config> ::frame_support::dispatch::Callable<T> for Module<T> {
    type Call = Call<T>;
}
impl<T: Config> Module<T> {
    #[doc(hidden)]
    #[allow(dead_code)]
    pub fn call_functions() -> &'static [::frame_support::dispatch::FunctionMetadata] {
        &[
            ::frame_support::dispatch::FunctionMetadata {
                name: ::frame_support::dispatch::DecodeDifferent::Encode("set_keys"),
                arguments: ::frame_support::dispatch::DecodeDifferent::Encode(&[
                    ::frame_support::dispatch::FunctionArgumentMetadata {
                        name: ::frame_support::dispatch::DecodeDifferent::Encode("keys"),
                        ty: ::frame_support::dispatch::DecodeDifferent::Encode("T::Keys"),
                    },
                    ::frame_support::dispatch::FunctionArgumentMetadata {
                        name: ::frame_support::dispatch::DecodeDifferent::Encode("proof"),
                        ty: ::frame_support::dispatch::DecodeDifferent::Encode("Vec<u8>"),
                    },
                ]),
                documentation: ::frame_support::dispatch::DecodeDifferent::Encode(&[
                    r" Sets the session key(s) of the function caller to `keys`.",
                    r" Allows an account to set its session key prior to becoming a validator.",
                    r" This doesn't take effect until the next session.",
                    r"",
                    r" The dispatch origin of this function must be signed.",
                    r"",
                    r" # <weight>",
                    r" - Complexity: `O(1)`",
                    r"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                    r" - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                    r" - DbWrites: `origin account`, `NextKeys`",
                    r" - DbReads per key id: `KeyOwner`",
                    r" - DbWrites per key id: `KeyOwner`",
                    r" # </weight>",
                ]),
            },
            ::frame_support::dispatch::FunctionMetadata {
                name: ::frame_support::dispatch::DecodeDifferent::Encode("purge_keys"),
                arguments: ::frame_support::dispatch::DecodeDifferent::Encode(&[]),
                documentation: ::frame_support::dispatch::DecodeDifferent::Encode(&[
                    r" Removes any session key(s) of the function caller.",
                    r" This doesn't take effect until the next session.",
                    r"",
                    r" The dispatch origin of this function must be signed.",
                    r"",
                    r" # <weight>",
                    r" - Complexity: `O(1)` in number of key types.",
                    r"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                    r" - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                    r" - DbWrites: `NextKeys`, `origin account`",
                    r" - DbWrites per key id: `KeyOwner`",
                    r" # </weight>",
                ]),
            },
        ]
    }
}
impl<T: 'static + Config> Module<T> {
    #[doc(hidden)]
    #[allow(dead_code)]
    pub fn module_constants_metadata(
    ) -> &'static [::frame_support::dispatch::ModuleConstantMetadata] {
        &[]
    }
}
impl<T: Config> ::frame_support::dispatch::ModuleErrorMetadata for Module<T> {
    fn metadata() -> &'static [::frame_support::dispatch::ErrorMetadata] {
        <Error<T> as ::frame_support::dispatch::ModuleErrorMetadata>::metadata()
    }
}
#[doc(hidden)]
pub mod __substrate_genesis_config_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_genesis_config_defined;
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_std_enabled_for_genesis;
}
#[doc(hidden)]
pub mod __substrate_event_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_event_part_defined;
}
#[doc(hidden)]
pub mod __substrate_inherent_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_inherent_part_defined;
}
#[doc(hidden)]
pub mod __substrate_validate_unsigned_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_validate_unsigned_part_defined;
}
#[doc(hidden)]
pub mod __substrate_call_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_call_part_defined;
}
#[doc(hidden)]
pub mod __substrate_origin_check {
    #[doc(hidden)]
    pub use __dummy_part_checker_0 as is_origin_part_defined;
}
impl<T: Config> Module<T> {
    /// Move on to next session. Register new validator set and session keys. Changes to the
    /// validator set have a session of delay to take effect. This allows for equivocation
    /// punishment after a fork.
    pub fn rotate_session() {
        let session_index = CurrentIndex::get();
        {
            let lvl = ::log::Level::Trace;
            if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                :: log :: __private_api_log (:: core :: fmt :: Arguments :: new_v1 (& ["rotating session "] , & match (& session_index ,) { _args => [:: core :: fmt :: ArgumentV1 :: new (_args . 0 , :: core :: fmt :: Debug :: fmt)] , }) , lvl , & ("runtime::session" , "pallet_session" , "/Users/mmac/.cargo/git/checkouts/substrate-7e08433d4c370a21/4d28ebe/frame/session/src/lib.rs" , 586u32)) ;
            }
        };
        let changed = QueuedChanged::get();
        T::SessionHandler::on_before_session_ending();
        T::SessionManager::end_session(session_index);
        let session_keys = <QueuedKeys<T>>::get();
        let validators = session_keys
            .iter()
            .map(|(validator, _)| validator.clone())
            .collect::<Vec<_>>();
        <Validators<T>>::put(&validators);
        if changed {
            DisabledValidators::take();
        }
        let session_index = session_index + 1;
        CurrentIndex::put(session_index);
        T::SessionManager::start_session(session_index);
        let maybe_next_validators = T::SessionManager::new_session(session_index + 1);
        let (next_validators, next_identities_changed) =
            if let Some(validators) = maybe_next_validators {
                (validators, true)
            } else {
                (<Validators<T>>::get(), false)
            };
        let (queued_amalgamated, next_changed) = {
            let mut changed = next_identities_changed;
            let mut now_session_keys = session_keys.iter();
            let mut check_next_changed = |keys: &T::Keys| {
                if changed {
                    return;
                }
                if let Some(&(_, ref old_keys)) = now_session_keys.next() {
                    if old_keys != keys {
                        changed = true;
                        return;
                    }
                }
            };
            let queued_amalgamated = next_validators
                .into_iter()
                .map(|a| {
                    let k = Self::load_keys(&a).unwrap_or_default();
                    check_next_changed(&k);
                    (a, k)
                })
                .collect::<Vec<_>>();
            (queued_amalgamated, changed)
        };
        <QueuedKeys<T>>::put(queued_amalgamated.clone());
        QueuedChanged::put(next_changed);
        Self::deposit_event(Event::NewSession(session_index));
        T::SessionHandler::on_new_session::<T::Keys>(changed, &session_keys, &queued_amalgamated);
    }
    /// Disable the validator of index `i`.
    ///
    /// Returns `true` if this causes a `DisabledValidatorsThreshold` of validators
    /// to be already disabled.
    pub fn disable_index(i: usize) -> bool {
        let (fire_event, threshold_reached) = DisabledValidators::mutate(|disabled| {
            let i = i as u32;
            if let Err(index) = disabled.binary_search(&i) {
                let count = <Validators<T>>::decode_len().unwrap_or(0) as u32;
                let threshold = T::DisabledValidatorsThreshold::get() * count;
                disabled.insert(index, i);
                (true, disabled.len() as u32 > threshold)
            } else {
                (false, false)
            }
        });
        if fire_event {
            T::SessionHandler::on_disabled(i);
        }
        threshold_reached
    }
    /// Disable the validator identified by `c`. (If using with the staking module,
    /// this would be their *stash* account.)
    ///
    /// Returns `Ok(true)` if more than `DisabledValidatorsThreshold` validators in current
    /// session is already disabled.
    /// If used with the staking module it allows to force a new era in such case.
    pub fn disable(c: &T::ValidatorId) -> sp_std::result::Result<bool, ()> {
        Self::validators()
            .iter()
            .position(|i| i == c)
            .map(Self::disable_index)
            .ok_or(())
    }
    /// Upgrade the key type from some old type to a new type. Supports adding
    /// and removing key types.
    ///
    /// This function should be used with extreme care and only during an
    /// `on_runtime_upgrade` block. Misuse of this function can put your blockchain
    /// into an unrecoverable state.
    ///
    /// Care should be taken that the raw versions of the
    /// added keys are unique for every `ValidatorId, KeyTypeId` combination.
    /// This is an invariant that the session module typically maintains internally.
    ///
    /// As the actual values of the keys are typically not known at runtime upgrade,
    /// it's recommended to initialize the keys to a (unique) dummy value with the expectation
    /// that all validators should invoke `set_keys` before those keys are actually
    /// required.
    pub fn upgrade_keys<Old, F>(upgrade: F)
    where
        Old: OpaqueKeys + Member + Decode,
        F: Fn(T::ValidatorId, Old) -> T::Keys,
    {
        let old_ids = Old::key_ids();
        let new_ids = T::Keys::key_ids();
        <NextKeys<T>>::translate::<Old, _>(|val, old_keys| {
            for i in old_ids.iter() {
                Self::clear_key_owner(*i, old_keys.get_raw(*i));
            }
            let new_keys = upgrade(val.clone(), old_keys);
            for i in new_ids.iter() {
                Self::put_key_owner(*i, new_keys.get_raw(*i), &val);
            }
            Some(new_keys)
        });
        let _ = <QueuedKeys<T>>::translate::<Vec<(T::ValidatorId, Old)>, _>(|k| {
            k.map(|k| {
                k.into_iter()
                    .map(|(val, old_keys)| (val.clone(), upgrade(val, old_keys)))
                    .collect::<Vec<_>>()
            })
        });
    }
    /// Perform the set_key operation, checking for duplicates. Does not set `Changed`.
    ///
    /// This ensures that the reference counter in system is incremented appropriately and as such
    /// must accept an account ID, rather than a validator ID.
    fn do_set_keys(account: &T::AccountId, keys: T::Keys) -> dispatch::DispatchResult {
        let who = T::ValidatorIdOf::convert(account.clone())
            .ok_or(Error::<T>::NoAssociatedValidatorId)?;
        {
            if !frame_system::Pallet::<T>::can_inc_consumer(&account) {
                {
                    return Err(Error::<T>::NoAccount.into());
                };
            }
        };
        let old_keys = Self::inner_set_keys(&who, keys)?;
        if old_keys.is_none() {
            let assertion = frame_system::Pallet::<T>::inc_consumers(&account).is_ok();
            if true {
                if !assertion {
                    {
                        ::std::rt::begin_panic(
                            "can_inc_consumer() returned true; no change since; qed",
                        )
                    }
                };
            };
        }
        Ok(())
    }
    /// Perform the set_key operation, checking for duplicates. Does not set `Changed`.
    ///
    /// The old keys for this validator are returned, or `None` if there were none.
    ///
    /// This does not ensure that the reference counter in system is incremented appropriately, it
    /// must be done by the caller or the keys will be leaked in storage.
    fn inner_set_keys(
        who: &T::ValidatorId,
        keys: T::Keys,
    ) -> Result<Option<T::Keys>, DispatchError> {
        let old_keys = Self::load_keys(who);
        for id in T::Keys::key_ids() {
            let key = keys.get_raw(*id);
            {
                if !Self::key_owner(*id, key).map_or(true, |owner| &owner == who) {
                    {
                        return Err(Error::<T>::DuplicatedKey.into());
                    };
                }
            };
        }
        for id in T::Keys::key_ids() {
            let key = keys.get_raw(*id);
            if let Some(old) = old_keys.as_ref().map(|k| k.get_raw(*id)) {
                if key == old {
                    continue;
                }
                Self::clear_key_owner(*id, old);
            }
            Self::put_key_owner(*id, key, who);
        }
        Self::put_keys(who, &keys);
        Ok(old_keys)
    }
    fn do_purge_keys(account: &T::AccountId) -> DispatchResult {
        let who = T::ValidatorIdOf::convert(account.clone())
            .ok_or(Error::<T>::NoAssociatedValidatorId)?;
        let old_keys = Self::take_keys(&who).ok_or(Error::<T>::NoKeys)?;
        for id in T::Keys::key_ids() {
            let key_data = old_keys.get_raw(*id);
            Self::clear_key_owner(*id, key_data);
        }
        frame_system::Pallet::<T>::dec_consumers(&account);
        Ok(())
    }
    fn load_keys(v: &T::ValidatorId) -> Option<T::Keys> {
        <NextKeys<T>>::get(v)
    }
    fn take_keys(v: &T::ValidatorId) -> Option<T::Keys> {
        <NextKeys<T>>::take(v)
    }
    fn put_keys(v: &T::ValidatorId, keys: &T::Keys) {
        <NextKeys<T>>::insert(v, keys);
    }
    /// Query the owner of a session key by returning the owner's validator ID.
    pub fn key_owner(id: KeyTypeId, key_data: &[u8]) -> Option<T::ValidatorId> {
        <KeyOwner<T>>::get((id, key_data))
    }
    fn put_key_owner(id: KeyTypeId, key_data: &[u8], v: &T::ValidatorId) {
        <KeyOwner<T>>::insert((id, key_data), v)
    }
    fn clear_key_owner(id: KeyTypeId, key_data: &[u8]) {
        <KeyOwner<T>>::remove((id, key_data));
    }
}
impl<T: Config> ValidatorSet<T::AccountId> for Module<T> {
    type ValidatorId = T::ValidatorId;
    type ValidatorIdOf = T::ValidatorIdOf;
    fn session_index() -> sp_staking::SessionIndex {
        Module::<T>::current_index()
    }
    fn validators() -> Vec<Self::ValidatorId> {
        Module::<T>::validators()
    }
}
/// Wraps the author-scraping logic for consensus engines that can recover
/// the canonical index of an author. This then transforms it into the
/// registering account-ID of that session key index.
pub struct FindAccountFromAuthorIndex<T, Inner>(sp_std::marker::PhantomData<(T, Inner)>);
impl<T: Config, Inner: FindAuthor<u32>> FindAuthor<T::ValidatorId>
    for FindAccountFromAuthorIndex<T, Inner>
{
    fn find_author<'a, I>(digests: I) -> Option<T::ValidatorId>
    where
        I: 'a + IntoIterator<Item = (ConsensusEngineId, &'a [u8])>,
    {
        let i = Inner::find_author(digests)?;
        let validators = <Module<T>>::validators();
        validators.get(i as usize).map(|k| k.clone())
    }
}
impl<T: Config> EstimateNextNewSession<T::BlockNumber> for Module<T> {
    fn average_session_length() -> T::BlockNumber {
        T::NextSessionRotation::average_session_length()
    }
    /// This session module always calls new_session and next_session at the same time, hence we
    /// do a simple proxy and pass the function to next rotation.
    fn estimate_next_new_session(now: T::BlockNumber) -> (Option<T::BlockNumber>, Weight) {
        T::NextSessionRotation::estimate_next_session_rotation(now)
    }
}
